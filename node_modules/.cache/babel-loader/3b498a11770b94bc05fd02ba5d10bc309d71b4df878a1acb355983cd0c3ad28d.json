{"ast":null,"code":"'use strict';\n\nvar packageJson = require('../package.json');\nvar PageHelper = require('./PageHelper');\nvar RequestResult = require('./RequestResult');\nvar errors = require('./errors');\nvar http = require('./_http');\nvar json = require('./_json');\nvar query = require('./query');\nvar stream = require('./stream');\nvar util = require('./_util');\nvar values = require('./values');\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.endpoint\n *   Full URL for the FaunaDB server.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?{ string: string }} options.headers\n *   Optional headers to send with requests\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must be a non-negative integer, with a maximum value of 5000.\n *   If an invalid value is passed a default of 500 ms is applied. If a value\n *   exceeding 5000 ms is passed (e.g. Infinity) the maximum of 5000 ms is applied.\n *   Only applicable for NodeJS environment (when http2 module is used).\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n * @param {?boolean} options.metrics\n *   Disabled by default. Controls whether or not query metrics are returned.\n */\nfunction Client(options) {\n  const http2SessionIdleTime = getHttp2SessionIdleTime(options ? options.http2SessionIdleTime : undefined);\n  if (options) options.http2SessionIdleTime = http2SessionIdleTime;\n  options = util.applyDefaults(options, {\n    endpoint: null,\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime,\n    checkNewVersion: false\n  });\n  this._observer = options.observer;\n  this._http = new http.HttpClient(options);\n  this.stream = stream.StreamAPI(this);\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion;\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function (expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query');\n  options = Object.assign({}, this._globalQueryOptions, options);\n  return this._execute('POST', '', query.wrap(expression), null, options);\n};\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function (expression, params, options) {\n  params = util.defaults(params, {});\n  options = util.defaults(options, {});\n  return new PageHelper(this, expression, params, options);\n};\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function (scope, timeout) {\n  return this._execute('GET', 'ping', null, {\n    scope: scope,\n    timeout: timeout\n  });\n};\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function () {\n  return this._http.getLastTxnTime();\n};\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function (time) {\n  this._http.syncLastTxnTime(time);\n};\n\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\nClient.prototype.close = function (opts) {\n  return this._http.close(opts);\n};\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} {value, metrics} An object containing the FaunaDB response object and the list of query metrics incurred by the request.\n */\nClient.prototype.queryWithMetrics = function (expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query');\n  return this._execute('POST', '', query.wrap(expression), null, options, true);\n};\nClient.prototype._execute = function (method, path, data, query, options) {\n  let returnMetrics = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  query = util.defaults(query, null);\n  if (path instanceof values.Ref || util.checkInstanceHasProperty(path, '_isFaunaRef')) {\n    path = path.value;\n  }\n  if (query !== null) {\n    query = util.removeUndefinedValues(query);\n  }\n  var startTime = Date.now();\n  var self = this;\n  var body = ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data);\n  return this._http.execute(Object.assign({}, options, {\n    path: path,\n    query: query,\n    method: method,\n    body: body\n  })).then(function (response) {\n    var endTime = Date.now();\n    var responseObject = json.parseJSON(response.body);\n    var result = new RequestResult(method, path, query, body, data, response.body, responseObject, response.status, response.headers, startTime, endTime);\n    self._handleRequestResult(response, result, options);\n    const metricsHeaders = ['x-compute-ops', 'x-byte-read-ops', 'x-byte-write-ops', 'x-query-time', 'x-txn-retries'];\n    if (returnMetrics) {\n      return {\n        value: responseObject['resource'],\n        metrics: Object.fromEntries(Array.from(Object.entries(response.headers)).filter(_ref => {\n          let [k, v] = _ref;\n          return metricsHeaders.includes(k);\n        }).map(_ref2 => {\n          let [k, v] = _ref2;\n          return [k, parseInt(v)];\n        }))\n      };\n    } else {\n      return responseObject['resource'];\n    }\n  });\n};\nClient.prototype._handleRequestResult = function (response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time';\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10));\n  }\n  var observers = [this._observer, options && options.observer];\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this);\n    }\n  });\n  errors.FaunaHTTPError.raiseForStatusCode(result);\n};\nfunction getHttp2SessionIdleTime(configuredIdleTime) {\n  const maxIdleTime = 5000;\n  const defaultIdleTime = 500;\n  const envIdleTime = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME');\n  var value = defaultIdleTime;\n  // attemp to set the idle time to the env value and then the configured value\n  const values = [envIdleTime, configuredIdleTime];\n  for (const rawValue of values) {\n    const parsedValue = rawValue === 'Infinity' ? Number.MAX_SAFE_INTEGER : parseInt(rawValue, 10);\n    const isNegative = parsedValue < 0;\n    const isGreaterThanMax = parsedValue > maxIdleTime;\n    // if we didn't get infinity or a positive integer move to the next value\n    if (isNegative || !parsedValue) continue;\n    // if we did get something valid constrain it to the ceiling\n    value = parsedValue;\n    if (isGreaterThanMax) value = maxIdleTime;\n    break;\n  }\n  return value;\n}\nmodule.exports = Client;","map":{"version":3,"names":["packageJson","require","PageHelper","RequestResult","errors","http","json","query","stream","util","values","Client","options","http2SessionIdleTime","getHttp2SessionIdleTime","undefined","applyDefaults","endpoint","domain","scheme","port","secret","timeout","observer","keepAlive","headers","fetch","queryTimeout","checkNewVersion","_observer","_http","HttpClient","StreamAPI","apiVersion","prototype","expression","arity","between","arguments","Object","assign","_globalQueryOptions","_execute","wrap","paginate","params","defaults","ping","scope","getLastTxnTime","syncLastTxnTime","time","close","opts","queryWithMetrics","method","path","data","returnMetrics","Ref","checkInstanceHasProperty","value","removeUndefinedValues","startTime","Date","now","self","body","indexOf","JSON","stringify","execute","then","response","endTime","responseObject","parseJSON","result","status","_handleRequestResult","metricsHeaders","metrics","fromEntries","Array","from","entries","filter","k","v","includes","map","parseInt","txnTimeHeaderKey","observers","forEach","FaunaHTTPError","raiseForStatusCode","configuredIdleTime","maxIdleTime","defaultIdleTime","envIdleTime","getEnvVariable","rawValue","parsedValue","Number","MAX_SAFE_INTEGER","isNegative","isGreaterThanMax","module","exports"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/faunadb/src/Client.js"],"sourcesContent":["'use strict'\n\nvar packageJson = require('../package.json')\nvar PageHelper = require('./PageHelper')\nvar RequestResult = require('./RequestResult')\nvar errors = require('./errors')\nvar http = require('./_http')\nvar json = require('./_json')\nvar query = require('./query')\nvar stream = require('./stream')\nvar util = require('./_util')\nvar values = require('./values')\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.endpoint\n *   Full URL for the FaunaDB server.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?{ string: string }} options.headers\n *   Optional headers to send with requests\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must be a non-negative integer, with a maximum value of 5000.\n *   If an invalid value is passed a default of 500 ms is applied. If a value\n *   exceeding 5000 ms is passed (e.g. Infinity) the maximum of 5000 ms is applied.\n *   Only applicable for NodeJS environment (when http2 module is used).\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n * @param {?boolean} options.metrics\n *   Disabled by default. Controls whether or not query metrics are returned.\n */\nfunction Client(options) {\n  const http2SessionIdleTime = getHttp2SessionIdleTime(\n    options ? options.http2SessionIdleTime : undefined\n  )\n\n  if (options) options.http2SessionIdleTime = http2SessionIdleTime\n\n  options = util.applyDefaults(options, {\n    endpoint: null,\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime,\n    checkNewVersion: false,\n  })\n\n  this._observer = options.observer\n  this._http = new http.HttpClient(options)\n  this.stream = stream.StreamAPI(this)\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function(expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query')\n  options = Object.assign({}, this._globalQueryOptions, options)\n  return this._execute('POST', '', query.wrap(expression), null, options)\n}\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function(expression, params, options) {\n  params = util.defaults(params, {})\n  options = util.defaults(options, {})\n\n  return new PageHelper(this, expression, params, options)\n}\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function(scope, timeout) {\n  return this._execute('GET', 'ping', null, { scope: scope, timeout: timeout })\n}\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function() {\n  return this._http.getLastTxnTime()\n}\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function(time) {\n  this._http.syncLastTxnTime(time)\n}\n\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\nClient.prototype.close = function(opts) {\n  return this._http.close(opts)\n}\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} {value, metrics} An object containing the FaunaDB response object and the list of query metrics incurred by the request.\n */\nClient.prototype.queryWithMetrics = function(expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query')\n  return this._execute('POST', '', query.wrap(expression), null, options, true)\n}\n\nClient.prototype._execute = function(\n  method,\n  path,\n  data,\n  query,\n  options,\n  returnMetrics = false\n) {\n  query = util.defaults(query, null)\n\n  if (\n    path instanceof values.Ref ||\n    util.checkInstanceHasProperty(path, '_isFaunaRef')\n  ) {\n    path = path.value\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query)\n  }\n\n  var startTime = Date.now()\n  var self = this\n  var body =\n    ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data)\n\n  return this._http\n    .execute(\n      Object.assign({}, options, {\n        path: path,\n        query: query,\n        method: method,\n        body: body,\n      })\n    )\n    .then(function(response) {\n      var endTime = Date.now()\n      var responseObject = json.parseJSON(response.body)\n      var result = new RequestResult(\n        method,\n        path,\n        query,\n        body,\n        data,\n        response.body,\n        responseObject,\n        response.status,\n        response.headers,\n        startTime,\n        endTime\n      )\n      self._handleRequestResult(response, result, options)\n\n      const metricsHeaders = [\n        'x-compute-ops',\n        'x-byte-read-ops',\n        'x-byte-write-ops',\n        'x-query-time',\n        'x-txn-retries',\n      ]\n\n      if (returnMetrics) {\n        return {\n          value: responseObject['resource'],\n          metrics: Object.fromEntries(\n            Array.from(Object.entries(response.headers))\n              .filter(([k, v]) => metricsHeaders.includes(k))\n              .map(([k, v]) => [k, parseInt(v)])\n          ),\n        }\n      } else {\n        return responseObject['resource']\n      }\n    })\n}\n\nClient.prototype._handleRequestResult = function(response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time'\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10))\n  }\n\n  var observers = [this._observer, options && options.observer]\n\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this)\n    }\n  })\n\n  errors.FaunaHTTPError.raiseForStatusCode(result)\n}\n\nfunction getHttp2SessionIdleTime(configuredIdleTime) {\n  const maxIdleTime = 5000\n  const defaultIdleTime = 500\n  const envIdleTime = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME')\n\n  var value = defaultIdleTime\n  // attemp to set the idle time to the env value and then the configured value\n  const values = [envIdleTime, configuredIdleTime]\n  for (const rawValue of values) {\n    const parsedValue =\n      rawValue === 'Infinity' ? Number.MAX_SAFE_INTEGER : parseInt(rawValue, 10)\n    const isNegative = parsedValue < 0\n    const isGreaterThanMax = parsedValue > maxIdleTime\n    // if we didn't get infinity or a positive integer move to the next value\n    if (isNegative || !parsedValue) continue\n    // if we did get something valid constrain it to the ceiling\n    value = parsedValue\n    if (isGreaterThanMax) value = maxIdleTime\n    break\n  }\n\n  return value\n}\n\nmodule.exports = Client\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}