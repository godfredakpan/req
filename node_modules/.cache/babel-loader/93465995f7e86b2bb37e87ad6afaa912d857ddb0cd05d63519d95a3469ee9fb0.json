{"ast":null,"code":"import find from './find.js';\nimport parse from './parse/index.js';\nimport format from './format/index.js';\nconst addMethod = function (View) {\n  /**   */\n  class Numbers extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Numbers';\n    }\n    parse(n) {\n      return this.getNth(n).map(parse);\n    }\n    get(n) {\n      return this.getNth(n).map(parse).map(o => o.num);\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {};\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0];\n        let parsed = parse(p);\n        json.number = {\n          prefix: parsed.prefix,\n          num: parsed.num,\n          suffix: parsed.suffix,\n          hasComma: parsed.hasComma,\n          unit: parsed.unit\n        };\n        return json;\n      }, []);\n    }\n    /** any known measurement unit, for the number */\n    units() {\n      return this.growRight('#Unit').match('#Unit$');\n    }\n    /** return only ordinal numbers */\n    isOrdinal() {\n      return this.if('#Ordinal');\n    }\n    /** return only cardinal numbers*/\n    isCardinal() {\n      return this.if('#Cardinal');\n    }\n\n    /** convert to numeric form like '8' or '8th' */\n    toNumber() {\n      let m = this.if('#TextValue');\n      m.forEach(val => {\n        let obj = parse(val);\n        if (obj.num === null) {\n          return;\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('NumericValue');\n      });\n      return this;\n    }\n    /** add commas, or nicer formatting for numbers */\n    toLocaleString() {\n      let m = this;\n      m.forEach(val => {\n        let obj = parse(val);\n        if (obj.num === null) {\n          return;\n        }\n        let num = obj.num.toLocaleString();\n        // support ordinal ending, too\n        if (val.has('#Ordinal')) {\n          let str = format(obj, 'Ordinal');\n          let end = str.match(/[a-z]+$/);\n          if (end) {\n            num += end[0] || '';\n          }\n        }\n        val.replaceWith(num, {\n          tags: true\n        });\n      });\n      return this;\n    }\n    /** convert to numeric form like 'eight' or 'eighth' */\n    toText() {\n      let m = this;\n      let res = m.map(val => {\n        if (val.has('#TextValue')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('TextValue');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** convert ordinal to cardinal form, like 'eight', or '8' */\n    toCardinal() {\n      let m = this;\n      let res = m.map(val => {\n        if (!val.has('#Ordinal')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('Cardinal');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n    toOrdinal() {\n      let m = this;\n      let res = m.map(val => {\n        if (val.has('#Ordinal')) {\n          return val;\n        }\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal';\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        val.tag('Ordinal');\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n\n    /** return only numbers that are == n */\n    isEqual(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num === n;\n      });\n    }\n    /** return only numbers that are > n*/\n    greaterThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num > n;\n      });\n    }\n    /** return only numbers that are < n*/\n    lessThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num < n;\n      });\n    }\n    /** return only numbers > min and < max */\n    between(min, max) {\n      return this.filter(val => {\n        let num = parse(val).num;\n        return num > min && num < max;\n      });\n    }\n    /** set these number to n */\n    set(n) {\n      if (n === undefined) {\n        return this; // don't bother\n      }\n\n      if (typeof n === 'string') {\n        n = parse(n).num;\n      }\n      let m = this;\n      let res = m.map(val => {\n        let obj = parse(val);\n        obj.num = n;\n        if (obj.num === null) {\n          return val;\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        if (val.has('#TextValue')) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        }\n        let str = format(obj, fmt);\n        // add commas to number\n        if (obj.hasComma && fmt === 'Cardinal') {\n          str = Number(str).toLocaleString();\n        }\n        val = val.not('#Currency');\n        val.replaceWith(str, {\n          tags: true\n        });\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    add(n) {\n      if (!n) {\n        return this; // don't bother\n      }\n\n      if (typeof n === 'string') {\n        n = parse(n).num;\n      }\n      let m = this;\n      let res = m.map(val => {\n        let obj = parse(val);\n        if (obj.num === null) {\n          return val;\n        }\n        obj.num += n;\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n        if (obj.isText) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n        }\n        let str = format(obj, fmt);\n        val.replaceWith(str, {\n          tags: true\n        });\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val;\n      });\n      return new Numbers(res.document, res.pointer);\n    }\n    /** decrease each number by n*/\n    subtract(n, agree) {\n      return this.add(n * -1, agree);\n    }\n    /** increase each number by 1 */\n    increment(agree) {\n      return this.add(1, agree);\n    }\n    /** decrease each number by 1 */\n    decrement(agree) {\n      return this.add(-1, agree);\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Numbers(this.document, pointer);\n      m._cache = this._cache; // share this full thing\n      return m;\n    }\n  }\n  // aliases\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString;\n  Numbers.prototype.isBetween = Numbers.prototype.between;\n  Numbers.prototype.minus = Numbers.prototype.subtract;\n  Numbers.prototype.plus = Numbers.prototype.add;\n  Numbers.prototype.equals = Numbers.prototype.isEqual;\n  View.prototype.numbers = function (n) {\n    let m = find(this);\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  View.prototype.percentages = function (n) {\n    let m = find(this);\n    m = m.filter(v => v.has('#Percent') || v.after('^percent'));\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  View.prototype.money = function (n) {\n    let m = find(this);\n    m = m.filter(v => v.has('#Money') || v.after('^#Currency'));\n    m = m.getNth(n);\n    return new Numbers(this.document, m.pointer);\n  };\n  // alias\n  View.prototype.values = View.prototype.numbers;\n};\nexport default addMethod;","map":{"version":3,"names":["find","parse","format","addMethod","View","Numbers","constructor","document","pointer","groups","viewType","n","getNth","map","get","o","num","json","opts","p","toView","parsed","number","prefix","suffix","hasComma","unit","units","growRight","match","isOrdinal","if","isCardinal","toNumber","m","forEach","val","obj","fmt","has","str","replaceWith","tags","tag","toLocaleString","end","toText","res","toCardinal","toOrdinal","isEqual","filter","greaterThan","lessThan","between","min","max","set","undefined","Number","not","add","isText","subtract","agree","increment","decrement","update","_cache","prototype","toNice","isBetween","minus","plus","equals","numbers","percentages","v","after","money","values"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/3-three/numbers/numbers/api.js"],"sourcesContent":["import find from './find.js'\nimport parse from './parse/index.js'\nimport format from './format/index.js'\n\nconst addMethod = function (View) {\n  /**   */\n  class Numbers extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Numbers'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    get(n) {\n      return this.getNth(n).map(parse).map(o => o.num)\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {}\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0]\n        let parsed = parse(p)\n        json.number = {\n          prefix: parsed.prefix,\n          num: parsed.num,\n          suffix: parsed.suffix,\n          hasComma: parsed.hasComma,\n          unit: parsed.unit\n        }\n        return json\n      }, [])\n    }\n    /** any known measurement unit, for the number */\n    units() {\n      return this.growRight('#Unit').match('#Unit$')\n    }\n    /** return only ordinal numbers */\n    isOrdinal() {\n      return this.if('#Ordinal')\n    }\n    /** return only cardinal numbers*/\n    isCardinal() {\n      return this.if('#Cardinal')\n    }\n\n    /** convert to numeric form like '8' or '8th' */\n    toNumber() {\n      let m = this.if('#TextValue')\n      m.forEach(val => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('NumericValue')\n      })\n      return this\n    }\n    /** add commas, or nicer formatting for numbers */\n    toLocaleString() {\n      let m = this\n      m.forEach((val) => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return\n        }\n        let num = obj.num.toLocaleString()\n        // support ordinal ending, too\n        if (val.has('#Ordinal')) {\n          let str = format(obj, 'Ordinal')\n          let end = str.match(/[a-z]+$/)\n          if (end) {\n            num += end[0] || ''\n          }\n        }\n        val.replaceWith(num, { tags: true })\n      })\n      return this\n    }\n    /** convert to numeric form like 'eight' or 'eighth' */\n    toText() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#TextValue')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('TextValue')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert ordinal to cardinal form, like 'eight', or '8' */\n    toCardinal() {\n      let m = this\n      let res = m.map(val => {\n        if (!val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Cardinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n    toOrdinal() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Ordinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n\n    /** return only numbers that are == n */\n    isEqual(n) {\n      return this.filter((val) => {\n        let num = parse(val).num\n        return num === n\n      })\n    }\n    /** return only numbers that are > n*/\n    greaterThan(n) {\n      return this.filter((val) => {\n        let num = parse(val).num\n        return num > n\n      })\n    }\n    /** return only numbers that are < n*/\n    lessThan(n) {\n      return this.filter((val) => {\n        let num = parse(val).num\n        return num < n\n      })\n    }\n    /** return only numbers > min and < max */\n    between(min, max) {\n      return this.filter((val) => {\n        let num = parse(val).num\n        return num > min && num < max\n      })\n    }\n    /** set these number to n */\n    set(n) {\n      if (n === undefined) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map((val) => {\n        let obj = parse(val)\n        obj.num = n\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (val.has('#TextValue')) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        // add commas to number\n        if (obj.hasComma && fmt === 'Cardinal') {\n          str = Number(str).toLocaleString()\n        }\n        val = val.not('#Currency')\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    add(n) {\n      if (!n) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map((val) => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        obj.num += n\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (obj.isText) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** decrease each number by n*/\n    subtract(n, agree) {\n      return this.add(n * -1, agree)\n    }\n    /** increase each number by 1 */\n    increment(agree) {\n      return this.add(1, agree)\n    }\n    /** decrease each number by 1 */\n    decrement(agree) {\n      return this.add(-1, agree)\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Numbers(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  // aliases\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString\n  Numbers.prototype.isBetween = Numbers.prototype.between\n  Numbers.prototype.minus = Numbers.prototype.subtract\n  Numbers.prototype.plus = Numbers.prototype.add\n  Numbers.prototype.equals = Numbers.prototype.isEqual\n\n  View.prototype.numbers = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.percentages = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Percent') || v.after('^percent'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.money = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Money') || v.after('^#Currency'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  // alias\n  View.prototype.values = View.prototype.numbers\n}\nexport default addMethod\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}