{"ast":null,"code":"'use strict';\n\nvar json = require('./_json');\n\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\nfunction logger(loggerFunction) {\n  return function (requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client);\n  };\n}\n\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n    method = requestResult.method,\n    path = requestResult.path,\n    requestContent = requestResult.requestContent,\n    responseHeaders = requestResult.responseHeaders,\n    responseContent = requestResult.responseContent,\n    statusCode = requestResult.statusCode,\n    timeTaken = requestResult.timeTaken;\n  var out = '';\n  function log(str) {\n    out = out + str;\n  }\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n');\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n');\n  }\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n');\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n');\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n');\n  return out;\n}\nfunction _indent(str) {\n  var indentStr = '  ';\n  return str.split('\\n').join('\\n' + indentStr);\n}\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true));\n}\nfunction _queryString(query) {\n  if (query == null) {\n    return '';\n  }\n  var keys = Object.keys(query);\n  if (keys.length === 0) {\n    return '';\n  }\n  var pairs = keys.map(function (key) {\n    return key + '=' + query[key];\n  });\n  return '?' + pairs.join('&');\n}\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult\n};","map":{"version":3,"names":["json","require","logger","loggerFunction","requestResult","client","showRequestResult","query","method","path","requestContent","responseHeaders","responseContent","statusCode","timeTaken","out","log","str","_queryString","_showJSON","_indent","indentStr","split","join","object","toJSON","keys","Object","length","pairs","map","key","module","exports"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/faunadb/src/clientLogger.js"],"sourcesContent":["'use strict'\n\nvar json = require('./_json')\n\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\nfunction logger(loggerFunction) {\n  return function(requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client)\n  }\n}\n\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n    method = requestResult.method,\n    path = requestResult.path,\n    requestContent = requestResult.requestContent,\n    responseHeaders = requestResult.responseHeaders,\n    responseContent = requestResult.responseContent,\n    statusCode = requestResult.statusCode,\n    timeTaken = requestResult.timeTaken\n\n  var out = ''\n\n  function log(str) {\n    out = out + str\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n')\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n')\n  }\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n')\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n')\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n')\n\n  return out\n}\n\nfunction _indent(str) {\n  var indentStr = '  '\n  return str.split('\\n').join('\\n' + indentStr)\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true))\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return ''\n  }\n\n  var keys = Object.keys(query)\n  if (keys.length === 0) {\n    return ''\n  }\n\n  var pairs = keys.map(function(key) {\n    return key + '=' + query[key]\n  })\n  return '?' + pairs.join('&')\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}