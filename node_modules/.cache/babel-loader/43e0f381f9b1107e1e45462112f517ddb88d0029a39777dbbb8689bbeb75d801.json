{"ast":null,"code":"const getCounts = function (rule, pairs) {\n  let yes = 0;\n  let no = 0;\n  pairs.forEach(pair => {\n    let [left, right] = pair;\n    if (!rule.reg.test(left)) {\n      return;\n    }\n    // console.log(replace(left, rule.from, rule.to), left.replace(rule.reg, rule.to))\n    // if (replace(left, rule.from, rule.to) === right) {\n    if (left.replace(rule.reg, rule.to) === right) {\n      yes += 1;\n    } else {\n      no += 1;\n    }\n  });\n  return {\n    yes,\n    no\n  };\n};\nconst score = function (rules, pairs) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  rules = rules.map(rule => {\n    let {\n      yes,\n      no\n    } = getCounts(rule, pairs);\n    rule.yes = yes;\n    rule.no = no;\n    delete rule.id;\n    return rule;\n  });\n  // worst-to-best\n  rules = rules.sort((a, b) => {\n    if (a.yes > b.yes) {\n      return 1;\n    } else if (a.yes < b.yes) {\n      return -1;\n    }\n    return 0;\n  });\n  return rules;\n};\nexport default score;","map":{"version":3,"names":["getCounts","rule","pairs","yes","no","forEach","pair","left","right","reg","test","replace","to","score","rules","opts","map","id","sort","a","b"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/suffix-thumb/src/learn/01-generate/score.js"],"sourcesContent":["const getCounts = function (rule, pairs) {\n  let yes = 0\n  let no = 0\n  pairs.forEach(pair => {\n    let [left, right] = pair\n    if (!rule.reg.test(left)) {\n      return\n    }\n    // console.log(replace(left, rule.from, rule.to), left.replace(rule.reg, rule.to))\n    // if (replace(left, rule.from, rule.to) === right) {\n    if (left.replace(rule.reg, rule.to) === right) {\n      yes += 1\n    } else {\n      no += 1\n    }\n  })\n  return { yes, no }\n}\n\nconst score = function (rules, pairs, opts = {}) {\n  rules = rules.map(rule => {\n    let { yes, no } = getCounts(rule, pairs)\n    rule.yes = yes\n    rule.no = no\n    delete rule.id\n    return rule\n  })\n  // worst-to-best\n  rules = rules.sort((a, b) => {\n    if (a.yes > b.yes) {\n      return 1\n    } else if (a.yes < b.yes) {\n      return -1\n    }\n    return 0\n  })\n  return rules\n}\nexport default score"],"mappings":"AAAA,MAAMA,SAAS,GAAG,UAAUC,IAAI,EAAEC,KAAK,EAAE;EACvC,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,EAAE,GAAG,CAAC;EACVF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;IACpB,IAAI,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGF,IAAI;IACxB,IAAI,CAACL,IAAI,CAACQ,GAAG,CAACC,IAAI,CAACH,IAAI,CAAC,EAAE;MACxB;IACF;IACA;IACA;IACA,IAAIA,IAAI,CAACI,OAAO,CAACV,IAAI,CAACQ,GAAG,EAAER,IAAI,CAACW,EAAE,CAAC,KAAKJ,KAAK,EAAE;MAC7CL,GAAG,IAAI,CAAC;IACV,CAAC,MAAM;MACLC,EAAE,IAAI,CAAC;IACT;EACF,CAAC,CAAC;EACF,OAAO;IAAED,GAAG;IAAEC;EAAG,CAAC;AACpB,CAAC;AAED,MAAMS,KAAK,GAAG,UAAUC,KAAK,EAAEZ,KAAK,EAAa;EAAA,IAAXa,IAAI,uEAAG,CAAC,CAAC;EAC7CD,KAAK,GAAGA,KAAK,CAACE,GAAG,CAACf,IAAI,IAAI;IACxB,IAAI;MAAEE,GAAG;MAAEC;IAAG,CAAC,GAAGJ,SAAS,CAACC,IAAI,EAAEC,KAAK,CAAC;IACxCD,IAAI,CAACE,GAAG,GAAGA,GAAG;IACdF,IAAI,CAACG,EAAE,GAAGA,EAAE;IACZ,OAAOH,IAAI,CAACgB,EAAE;IACd,OAAOhB,IAAI;EACb,CAAC,CAAC;EACF;EACAa,KAAK,GAAGA,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC3B,IAAID,CAAC,CAAChB,GAAG,GAAGiB,CAAC,CAACjB,GAAG,EAAE;MACjB,OAAO,CAAC;IACV,CAAC,MAAM,IAAIgB,CAAC,CAAChB,GAAG,GAAGiB,CAAC,CAACjB,GAAG,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EACF,OAAOW,KAAK;AACd,CAAC;AACD,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}