{"ast":null,"code":"import { findChained } from './lib.js';\n\n// find best reference for 'they' & 'their'\nconst getThey = function (s) {\n  // 'the bananas'\n  let things = s.nouns().isPlural();\n  if (things.found) {\n    return things.last();\n  }\n  // re-use existing pronoun reference\n  let chain = findChained('(they|their|theirs)', s);\n  if (chain.found) {\n    return chain;\n  }\n  return s.none();\n};\nexport default getThey;","map":{"version":3,"names":["findChained","getThey","s","things","nouns","isPlural","found","last","chain","none"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/3-three/coreference/compute/findThey.js"],"sourcesContent":["import { findChained } from './lib.js'\n\n// find best reference for 'they' & 'their'\nconst getThey = function (s) {\n  // 'the bananas'\n  let things = s.nouns().isPlural()\n  if (things.found) {\n    return things.last()\n  }\n  // re-use existing pronoun reference\n  let chain = findChained('(they|their|theirs)', s)\n  if (chain.found) {\n    return chain\n  }\n  return s.none()\n}\n\n\nexport default getThey"],"mappings":"AAAA,SAASA,WAAW,QAAQ,UAAU;;AAEtC;AACA,MAAMC,OAAO,GAAG,UAAUC,CAAC,EAAE;EAC3B;EACA,IAAIC,MAAM,GAAGD,CAAC,CAACE,KAAK,EAAE,CAACC,QAAQ,EAAE;EACjC,IAAIF,MAAM,CAACG,KAAK,EAAE;IAChB,OAAOH,MAAM,CAACI,IAAI,EAAE;EACtB;EACA;EACA,IAAIC,KAAK,GAAGR,WAAW,CAAC,qBAAqB,EAAEE,CAAC,CAAC;EACjD,IAAIM,KAAK,CAACF,KAAK,EAAE;IACf,OAAOE,KAAK;EACd;EACA,OAAON,CAAC,CAACO,IAAI,EAAE;AACjB,CAAC;AAGD,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}