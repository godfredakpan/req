{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.mergeRefs = mergeRefs;\nexports.default = void 0;\nvar _react = require(\"react\");\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\nfunction mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\nvar _default = useMergedRefs;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","mergeRefs","default","_react","require","toFnRef","ref","value","current","refA","refB","a","b","useMergedRefs","useMemo","_default"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/@restart/hooks/cjs/useMergedRefs.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.mergeRefs = mergeRefs;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nfunction mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\n\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nvar _default = useMergedRefs;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE7B,IAAIC,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;EAClC,OAAO,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,UAAU,GAAGA,GAAG,GAAG,UAAUC,KAAK,EAAE;IAChED,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB,CAAC;AACH,CAAC;AAED,SAASN,SAAS,CAACQ,IAAI,EAAEC,IAAI,EAAE;EAC7B,IAAIC,CAAC,GAAGN,OAAO,CAACI,IAAI,CAAC;EACrB,IAAIG,CAAC,GAAGP,OAAO,CAACK,IAAI,CAAC;EACrB,OAAO,UAAUH,KAAK,EAAE;IACtB,IAAII,CAAC,EAAEA,CAAC,CAACJ,KAAK,CAAC;IACf,IAAIK,CAAC,EAAEA,CAAC,CAACL,KAAK,CAAC;EACjB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASM,aAAa,CAACJ,IAAI,EAAEC,IAAI,EAAE;EACjC,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACW,OAAO,EAAE,YAAY;IACrC,OAAOb,SAAS,CAACQ,IAAI,EAAEC,IAAI,CAAC;EAC9B,CAAC,EAAE,CAACD,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClB;AAEA,IAAIK,QAAQ,GAAGF,aAAa;AAC5Bd,OAAO,CAACG,OAAO,GAAGa,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}