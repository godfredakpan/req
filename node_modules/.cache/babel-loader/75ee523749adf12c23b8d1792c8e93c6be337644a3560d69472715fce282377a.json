{"ast":null,"code":"import doRules from './lib.js';\nconst suffixes = [null, {\n  'y': 'iness'\n}, {\n  'le': 'ility',\n  'al': 'ality',\n  'ay': 'ayness'\n}, {\n  'ial': 'y',\n  'ing': 'ment',\n  'ess': 'essness',\n  'ous': 'ousness',\n  'ive': 'ivity',\n  'ect': 'ection'\n}, {\n  'ting': 'ting',\n  'ring': 'ring',\n  'cial': 'ciality',\n  'nate': 'nation',\n  'rate': 'ration',\n  'bing': 'bingness',\n  'atic': 'acy',\n  //democratic\n  'sing': 'se',\n  'iful': 'y',\n  //beautify, merciful\n  'ible': 'ibility' //credible\n}, {\n  'erate': 'eration'\n}, {\n  'ionate': 'ion'\n}];\nconst exceptions = {\n  clean: 'cleanliness',\n  naive: 'naivety',\n  dramatic: 'drama',\n  ironic: 'irony',\n  deep: 'depth',\n  automatic: 'automation',\n  simple: 'simplicity',\n  boring: 'boredom',\n  free: 'freedom',\n  wise: 'wisdom',\n  fortunate: 'fortune',\n  gentle: 'gentleness',\n  quiet: 'quiet',\n  expensive: 'expense',\n  offensive: 'offence'\n};\nconst dontDo = new Set(['terrible', 'annoying']);\n\n// a lot of adjectives *don't really* have a noun-form\n// 'broken' -> 'brokeness'?\n// 'surreal' -> 'surrealness'?\n// but here, conjugate what it would be, if it made sense to\nconst toNoun = function (str) {\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str];\n  }\n  if (dontDo.has(str)) {\n    return null;\n  }\n  let res = doRules(str, suffixes);\n  if (res) {\n    return res;\n  }\n  return str + 'ness';\n};\nexport default toNoun;\n// console.log(toNoun('clever'))","map":{"version":3,"names":["doRules","suffixes","exceptions","clean","naive","dramatic","ironic","deep","automatic","simple","boring","free","wise","fortunate","gentle","quiet","expensive","offensive","dontDo","Set","toNoun","str","hasOwnProperty","has","res"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/adverbs/toNoun.js"],"sourcesContent":["import doRules from './lib.js'\n\nconst suffixes = [\n  null,\n  {\n    'y': 'iness',\n  },\n  {\n    'le': 'ility',\n    'al': 'ality',\n    'ay': 'ayness',\n  },\n  {\n    'ial': 'y',\n    'ing': 'ment',\n    'ess': 'essness',\n    'ous': 'ousness',\n    'ive': 'ivity',\n    'ect': 'ection'\n  },\n  {\n    'ting': 'ting',\n    'ring': 'ring',\n    'cial': 'ciality',\n    'nate': 'nation',\n    'rate': 'ration',\n    'bing': 'bingness',\n    'atic': 'acy',//democratic\n    'sing': 'se',\n    'iful': 'y',//beautify, merciful\n    'ible': 'ibility'//credible\n  },\n  {\n    'erate': 'eration'\n\n  },\n  {\n    'ionate': 'ion'\n  },\n]\n\nconst exceptions = {\n  clean: 'cleanliness',\n  naive: 'naivety',\n  dramatic: 'drama',\n  ironic: 'irony',\n  deep: 'depth',\n  automatic: 'automation',\n  simple: 'simplicity',\n  boring: 'boredom',\n  free: 'freedom',\n  wise: 'wisdom',\n  fortunate: 'fortune',\n  gentle: 'gentleness',\n  quiet: 'quiet',\n  expensive: 'expense',\n  offensive: 'offence'\n}\n\nconst dontDo = new Set([\n  'terrible',\n  'annoying',\n])\n\n// a lot of adjectives *don't really* have a noun-form\n// 'broken' -> 'brokeness'?\n// 'surreal' -> 'surrealness'?\n// but here, conjugate what it would be, if it made sense to\nconst toNoun = function (str) {\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str]\n  }\n  if (dontDo.has(str)) {\n    return null\n  }\n  let res = doRules(str, suffixes)\n  if (res) {\n    return res\n  }\n  return str + 'ness'\n}\nexport default toNoun\n// console.log(toNoun('clever'))"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAE9B,MAAMC,QAAQ,GAAG,CACf,IAAI,EACJ;EACE,GAAG,EAAE;AACP,CAAC,EACD;EACE,IAAI,EAAE,OAAO;EACb,IAAI,EAAE,OAAO;EACb,IAAI,EAAE;AACR,CAAC,EACD;EACE,KAAK,EAAE,GAAG;EACV,KAAK,EAAE,MAAM;EACb,KAAK,EAAE,SAAS;EAChB,KAAK,EAAE,SAAS;EAChB,KAAK,EAAE,OAAO;EACd,KAAK,EAAE;AACT,CAAC,EACD;EACE,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,SAAS;EACjB,MAAM,EAAE,QAAQ;EAChB,MAAM,EAAE,QAAQ;EAChB,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE,KAAK;EAAC;EACd,MAAM,EAAE,IAAI;EACZ,MAAM,EAAE,GAAG;EAAC;EACZ,MAAM,EAAE,SAAS;AACnB,CAAC,EACD;EACE,OAAO,EAAE;AAEX,CAAC,EACD;EACE,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,aAAa;EACpBC,KAAK,EAAE,SAAS;EAChBC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,OAAO;EACfC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAE,YAAY;EACvBC,MAAM,EAAE,YAAY;EACpBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,SAAS;EACpBC,MAAM,EAAE,YAAY;EACpBC,KAAK,EAAE,OAAO;EACdC,SAAS,EAAE,SAAS;EACpBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CACrB,UAAU,EACV,UAAU,CACX,CAAC;;AAEF;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,UAAUC,GAAG,EAAE;EAC5B,IAAInB,UAAU,CAACoB,cAAc,CAACD,GAAG,CAAC,EAAE;IAClC,OAAOnB,UAAU,CAACmB,GAAG,CAAC;EACxB;EACA,IAAIH,MAAM,CAACK,GAAG,CAACF,GAAG,CAAC,EAAE;IACnB,OAAO,IAAI;EACb;EACA,IAAIG,GAAG,GAAGxB,OAAO,CAACqB,GAAG,EAAEpB,QAAQ,CAAC;EAChC,IAAIuB,GAAG,EAAE;IACP,OAAOA,GAAG;EACZ;EACA,OAAOH,GAAG,GAAG,MAAM;AACrB,CAAC;AACD,eAAeD,MAAM;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}