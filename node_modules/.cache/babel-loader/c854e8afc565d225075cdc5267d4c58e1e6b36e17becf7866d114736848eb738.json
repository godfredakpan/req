{"ast":null,"code":"var _jsxFileName = \"/Users/godfredakpan/Documents/projects/AgentReg/src/components/all_users.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport getAllUsers from '../fauna/getUsers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst credentials = {\n  loginCode: 'test'\n};\nconst columns = [{\n  dataField: 'fname',\n  text: 'First Name'\n}, {\n  dataField: 'mname',\n  text: 'Middle Name'\n}, {\n  dataField: 'lname',\n  text: 'Last Name'\n}, {\n  dataField: 'gender',\n  text: 'Gender'\n}, {\n  dataField: 'dob',\n  text: 'Date of Birth'\n}, {\n  dataField: 'email',\n  text: 'Email'\n}, {\n  dataField: 'phone',\n  text: 'Phone'\n}, {\n  dataField: 'address',\n  text: 'Address'\n}, {\n  dataField: 'bank_name',\n  text: 'Bank Name'\n}, {\n  dataField: 'account_number',\n  text: 'Acct Number'\n}, {\n  dataField: 'account_name',\n  text: 'Account Name'\n}];\nconst options = {\n  sizePerPage: 10,\n  hideSizePerPage: false,\n  hidePageListOnlyOnePage: true,\n  alwaysShowAllBtns: true\n};\nfunction Users() {\n  _s();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [users, setUsers] = useState([]);\n  const loggedIn = sessionStorage.getItem('loggedIn');\n  React.useEffect(() => {\n    async function fetchData() {\n      if (!loggedIn) {\n        const loginCode = prompt('Please enter your login code');\n        if (loginCode !== credentials.loginCode) {\n          alert('Invalid login code');\n          return;\n        }\n      }\n      sessionStorage.setItem('loggedIn', true);\n      const users = await getAllUsers();\n      const reformedUsers = users.map(user => {\n        return {\n          ...user.data,\n          id: user.ref.id\n        };\n      });\n      setUsers(reformedUsers);\n    }\n    fetchData();\n  }, []);\n  const handleSelect = (row, isSelected) => {\n    if (isSelected) {\n      setSelectedRows([...selectedRows, row]);\n    } else {\n      setSelectedRows(selectedRows.filter(r => r.id !== row.id));\n    }\n  };\n  const handleExportClick = () => {\n    const selectedData = selectedRows.length > 0 ? selectedRows : users;\n    const sheetData = [['First Name', 'Middle Name', 'Last Name', 'Gender', 'Date of Birth', 'Email', 'Phone', 'Address', 'Bank Name', 'Account Number', 'Account Name'], ...selectedData.map(d => [d.firstName, d.middleName, d.lastName, d.gender, d.dob, d.email, d.phone, d.address, d.bankName, d.accountNumber, d.accountName])];\n    const sheetName = 'Purple Data';\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    saveAs(new Blob([excelBuffer], {\n      type: 'application/octet-stream'\n    }), `${sheetName}.xlsx`);\n  };\n  setTimeout(() => {\n    sessionStorage.clear();\n  }, 1800000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5 card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row card-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Entries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn-success\",\n          style: {\n            marginBottom: '20px'\n          },\n          onClick: handleExportClick,\n          children: \"Export to Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n          keyField: \"id\",\n          data: users,\n          columns: columns,\n          selectRow: {\n            mode: 'checkbox',\n            onSelect: handleSelect\n          },\n          pagination: paginationFactory(options),\n          wrapperClasses: \"table-responsive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n_s(Users, \"bHa78TjZFeey2Sz6TMx0BEQ5bc0=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","BootstrapTable","paginationFactory","Button","saveAs","XLSX","getAllUsers","credentials","loginCode","columns","dataField","text","options","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","alwaysShowAllBtns","Users","selectedRows","setSelectedRows","users","setUsers","loggedIn","sessionStorage","getItem","useEffect","fetchData","prompt","alert","setItem","reformedUsers","map","user","data","id","ref","handleSelect","row","isSelected","filter","r","handleExportClick","selectedData","length","sheetData","d","firstName","middleName","lastName","gender","dob","email","phone","address","bankName","accountNumber","accountName","sheetName","workbook","utils","book_new","worksheet","aoa_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","Blob","setTimeout","clear","marginBottom","mode","onSelect"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/src/components/all_users.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport getAllUsers from '../fauna/getUsers';\n\n\nconst credentials = {\n    loginCode: 'test',\n}\n\nconst columns = [\n    {\n        dataField: 'fname',\n        text: 'First Name',\n    },\n    {\n        dataField: 'mname',\n        text: 'Middle Name',\n    },\n    {\n        dataField: 'lname',\n        text: 'Last Name',\n    },\n    {\n        dataField: 'gender',\n        text: 'Gender',\n    },\n    {\n        dataField: 'dob',\n        text: 'Date of Birth',\n    },\n    {\n        dataField: 'email',\n        text: 'Email',\n    },\n    {\n        dataField: 'phone',\n        text: 'Phone',\n    },\n    {\n        dataField: 'address',\n        text: 'Address',\n    },\n    {\n        dataField: 'bank_name',\n        text: 'Bank Name',\n    },\n    {\n        dataField: 'account_number',\n        text: 'Acct Number',\n    },\n    {\n        dataField: 'account_name',\n        text: 'Account Name',\n    },\n\n];\n\n\nconst options = {\n    sizePerPage: 10,\n    hideSizePerPage: false,\n    hidePageListOnlyOnePage: true,\n    alwaysShowAllBtns: true,\n};\n\nfunction Users() {\n    const [selectedRows, setSelectedRows] = useState([]);\n    const [users, setUsers] = useState([]);\n\n    const loggedIn = sessionStorage.getItem('loggedIn');\n\n    React.useEffect(() => {\n        async function fetchData() {\n            if (!loggedIn) {\n                const loginCode = prompt('Please enter your login code');\n                if (loginCode !== credentials.loginCode) {\n                    alert('Invalid login code');\n                    return;\n                }\n            }\n            sessionStorage.setItem('loggedIn', true);\n            const users = await getAllUsers();\n            const reformedUsers = users.map((user) => {\n                return { ...user.data, id: user.ref.id };\n            });\n            setUsers(reformedUsers);\n        }\n        fetchData();\n    }, [])\n\n    const handleSelect = (row, isSelected) => {\n        if (isSelected) {\n            setSelectedRows([...selectedRows, row]);\n        } else {\n            setSelectedRows(selectedRows.filter((r) => r.id !== row.id));\n        }\n    };\n\n\n    const handleExportClick = () => {\n        const selectedData = selectedRows.length > 0 ? selectedRows : users;\n\n        const sheetData = [\n            ['First Name', 'Middle Name', 'Last Name', 'Gender', 'Date of Birth', 'Email', 'Phone', 'Address', 'Bank Name', 'Account Number', 'Account Name'],\n            ...selectedData.map((d) => [d.firstName, d.middleName, d.lastName, d.gender, d.dob, d.email, d.phone, d.address, d.bankName, d.accountNumber, d.accountName]),\n        ];\n\n        const sheetName = 'Purple Data';\n\n        const workbook = XLSX.utils.book_new();\n        const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n\n        XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n\n        const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array',\n        });\n\n        saveAs(\n            new Blob([excelBuffer], { type: 'application/octet-stream' }),\n            `${sheetName}.xlsx`\n        );\n    };\n\n\n    setTimeout(() => {\n        sessionStorage.clear();\n    }, 1800000);\n\n    return (\n        <div className=\"container mt-5 card\">\n            <div className=\"row card-body\">\n                <div className=\"col-md-12\">\n                    <h2>Entries</h2>\n                    <Button className='btn-success' style={{ marginBottom: '20px' }} onClick={handleExportClick}>Export to Excel</Button>\n                    <BootstrapTable\n                        keyField=\"id\"\n                        data={users}\n                        columns={columns}\n                        selectRow={{ mode: 'checkbox', onSelect: handleSelect }}\n                        pagination={paginationFactory(options)}\n                        wrapperClasses=\"table-responsive\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}