{"ast":null,"code":"'use strict';\n\nvar base64 = require('base64-js');\nvar deprecate = require('util-deprecate');\nvar errors = require('./errors');\nvar Expr = require('./Expr');\nvar util = require('./_util');\nvar nodeUtil = util.isNodeEnv() ? require('util') : null;\nvar customInspect = nodeUtil && nodeUtil.inspect.custom;\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify;\n\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\nfunction Value() {}\nutil.inherits(Value, Expr);\nValue.prototype._isFaunaValue = true;\n\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined');\n  this.value = {\n    id: id\n  };\n  if (collection) this.value['collection'] = collection;\n  if (database) this.value['database'] = database;\n}\nutil.inherits(Ref, Value);\nRef.prototype._isFaunaRef = true;\n\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function () {\n    return this.value['collection'];\n  }\n});\n\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function () {\n    return this.value['collection'];\n  }, 'class is deprecated, use collection instead')\n});\n\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function () {\n    return this.value['database'];\n  }\n});\n\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function () {\n    return this.value['id'];\n  }\n});\n\n/** @ignore */\nRef.prototype.toJSON = function () {\n  return {\n    '@ref': this.value\n  };\n};\nwrapToString(Ref, function () {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider'\n  };\n  var isNative = function (ref) {\n    return ref.collection === undefined;\n  };\n  var toString = function (ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : '';\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')';\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')';\n    }\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id];\n      if (constructor !== undefined) {\n        var db = ref.database !== undefined ? ', ' + ref.database.toString() : '';\n        return constructor + '(\"' + ref.id + '\"' + db + ')';\n      }\n    }\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")';\n  };\n  return toString(this);\n});\n\n/** @ignore */\nRef.prototype.valueOf = function () {\n  return this.value;\n};\n\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\nRef.prototype.equals = function (other) {\n  return (other instanceof Ref || util.checkInstanceHasProperty(other, '_isFaunaRef')) && this.id === other.id && (this.collection === undefined && other.collection === undefined || this.collection.equals(other.collection)) && (this.database === undefined && other.database === undefined || this.database.equals(other.database));\n};\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers')\n};\nNative.fromName = function (name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS;\n    case 'indexes':\n      return Native.INDEXES;\n    case 'databases':\n      return Native.DATABASES;\n    case 'functions':\n      return Native.FUNCTIONS;\n    case 'roles':\n      return Native.ROLES;\n    case 'keys':\n      return Native.KEYS;\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS;\n  }\n  return new Ref(name);\n};\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value;\n}\nutil.inherits(SetRef, Value);\nwrapToString(SetRef, function () {\n  return Expr.toString(this.value);\n});\n\n/** @ignore */\nSetRef.prototype.toJSON = function () {\n  return {\n    '@set': this.value\n  };\n};\n\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString();\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value);\n  }\n  this.value = value;\n}\nutil.inherits(FaunaTime, Value);\n\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function () {\n    return new Date(this.value);\n  }\n});\nwrapToString(FaunaTime, function () {\n  return 'Time(\"' + this.value + '\")';\n});\n\n/** @ignore */\nFaunaTime.prototype.toJSON = function () {\n  return {\n    '@ts': this.value\n  };\n};\n\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10);\n  }\n\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n  this.value = value;\n}\nutil.inherits(FaunaDate, Value);\n\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function () {\n    return new Date(this.value);\n  }\n});\nwrapToString(FaunaDate, function () {\n  return 'Date(\"' + this.value + '\")';\n});\n\n/** @ignore */\nFaunaDate.prototype.toJSON = function () {\n  return {\n    '@date': this.value\n  };\n};\n\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value);\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value);\n  } else if (value instanceof Uint8Array) {\n    this.value = value;\n  } else {\n    throw new errors.InvalidValue('Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' + stringify(value));\n  }\n}\nutil.inherits(Bytes, Value);\nwrapToString(Bytes, function () {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")';\n});\n\n/** @ignore */\nBytes.prototype.toJSON = function () {\n  return {\n    '@bytes': base64.fromByteArray(this.value)\n  };\n};\n\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\nfunction Query(value) {\n  this.value = value;\n}\nutil.inherits(Query, Value);\nwrapToString(Query, function () {\n  return 'Query(' + Expr.toString(this.value) + ')';\n});\n\n/** @ignore */\nQuery.prototype.toJSON = function () {\n  return {\n    '@query': this.value\n  };\n};\n\n/** @ignore */\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn;\n  type.prototype.inspect = fn;\n  if (customInspect) {\n    type.prototype[customInspect] = fn;\n  }\n}\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query\n};","map":{"version":3,"names":["base64","require","deprecate","errors","Expr","util","nodeUtil","isNodeEnv","customInspect","inspect","custom","stringify","JSON","Value","inherits","prototype","_isFaunaValue","Ref","id","collection","database","InvalidValue","value","_isFaunaRef","Object","defineProperty","get","toJSON","wrapToString","constructors","collections","databases","indexes","functions","roles","access_providers","isNative","ref","undefined","toString","db","charAt","toUpperCase","slice","constructor","valueOf","equals","other","checkInstanceHasProperty","Native","COLLECTIONS","INDEXES","DATABASES","FUNCTIONS","ROLES","KEYS","ACCESS_PROVIDERS","fromName","name","SetRef","FaunaTime","Date","toISOString","length","FaunaDate","Bytes","ArrayBuffer","Uint8Array","toByteArray","fromByteArray","Query","type","fn","module","exports"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/faunadb/src/values.js"],"sourcesContent":["'use strict'\n\nvar base64 = require('base64-js')\nvar deprecate = require('util-deprecate')\nvar errors = require('./errors')\nvar Expr = require('./Expr')\nvar util = require('./_util')\nvar nodeUtil = util.isNodeEnv() ? require('util') : null\n\nvar customInspect = nodeUtil && nodeUtil.inspect.custom\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify\n\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\nfunction Value() {}\n\nutil.inherits(Value, Expr)\n\nValue.prototype._isFaunaValue = true\n\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined')\n\n  this.value = { id: id }\n  if (collection) this.value['collection'] = collection\n  if (database) this.value['database'] = database\n}\n\nutil.inherits(Ref, Value)\n\nRef.prototype._isFaunaRef = true\n\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function() {\n    return this.value['collection']\n  },\n})\n\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function() {\n    return this.value['collection']\n  }, 'class is deprecated, use collection instead'),\n})\n\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function() {\n    return this.value['database']\n  },\n})\n\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function() {\n    return this.value['id']\n  },\n})\n\n/** @ignore */\nRef.prototype.toJSON = function() {\n  return { '@ref': this.value }\n}\n\nwrapToString(Ref, function() {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider',\n  }\n\n  var isNative = function(ref) {\n    return ref.collection === undefined\n  }\n\n  var toString = function(ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : ''\n\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')'\n\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')'\n    }\n\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id]\n      if (constructor !== undefined) {\n        var db =\n          ref.database !== undefined ? ', ' + ref.database.toString() : ''\n        return constructor + '(\"' + ref.id + '\"' + db + ')'\n      }\n    }\n\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")'\n  }\n\n  return toString(this)\n})\n\n/** @ignore */\nRef.prototype.valueOf = function() {\n  return this.value\n}\n\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\nRef.prototype.equals = function(other) {\n  return (\n    (other instanceof Ref ||\n      util.checkInstanceHasProperty(other, '_isFaunaRef')) &&\n    this.id === other.id &&\n    ((this.collection === undefined && other.collection === undefined) ||\n      this.collection.equals(other.collection)) &&\n    ((this.database === undefined && other.database === undefined) ||\n      this.database.equals(other.database))\n  )\n}\n\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers'),\n}\n\nNative.fromName = function(name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS\n    case 'indexes':\n      return Native.INDEXES\n    case 'databases':\n      return Native.DATABASES\n    case 'functions':\n      return Native.FUNCTIONS\n    case 'roles':\n      return Native.ROLES\n    case 'keys':\n      return Native.KEYS\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS\n  }\n  return new Ref(name)\n}\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value\n}\n\nutil.inherits(SetRef, Value)\n\nwrapToString(SetRef, function() {\n  return Expr.toString(this.value)\n})\n\n/** @ignore */\nSetRef.prototype.toJSON = function() {\n  return { '@set': this.value }\n}\n\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString()\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value)\n  }\n\n  this.value = value\n}\n\nutil.inherits(FaunaTime, Value)\n\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaTime, function() {\n  return 'Time(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaTime.prototype.toJSON = function() {\n  return { '@ts': this.value }\n}\n\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10)\n  }\n\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n  this.value = value\n}\n\nutil.inherits(FaunaDate, Value)\n\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaDate, function() {\n  return 'Date(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaDate.prototype.toJSON = function() {\n  return { '@date': this.value }\n}\n\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value)\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value)\n  } else if (value instanceof Uint8Array) {\n    this.value = value\n  } else {\n    throw new errors.InvalidValue(\n      'Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' +\n        stringify(value)\n    )\n  }\n}\n\nutil.inherits(Bytes, Value)\n\nwrapToString(Bytes, function() {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")'\n})\n\n/** @ignore */\nBytes.prototype.toJSON = function() {\n  return { '@bytes': base64.fromByteArray(this.value) }\n}\n\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\nfunction Query(value) {\n  this.value = value\n}\n\nutil.inherits(Query, Value)\n\nwrapToString(Query, function() {\n  return 'Query(' + Expr.toString(this.value) + ')'\n})\n\n/** @ignore */\nQuery.prototype.toJSON = function() {\n  return { '@query': this.value }\n}\n\n/** @ignore */\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn\n  type.prototype.inspect = fn\n\n  if (customInspect) {\n    type.prototype[customInspect] = fn\n  }\n}\n\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}