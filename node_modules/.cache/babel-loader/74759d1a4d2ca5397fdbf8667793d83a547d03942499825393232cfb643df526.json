{"ast":null,"code":"import classify from '../classify/index.js';\nconst green = str => '\\x1b[32m' + str + '\\x1b[0m';\nconst red = str => '\\x1b[31m' + str + '\\x1b[0m';\nconst yellow = str => '\\x1b[33m' + str + '\\x1b[0m';\nconst dim = str => '\\x1b[2m' + str + '\\x1b[0m';\nconst percent = (part, total) => {\n  let num = part / total * 100;\n  num = Math.round(num * 10) / 10;\n  return num + '%';\n};\nconst testSide = function (pairs, model, side) {\n  let nulls = 0;\n  let wrong = 0;\n  let right = 0;\n  pairs.forEach(a => {\n    let str = side === 'Left' ? a[0] : a[1];\n    let found = classify(str, model, true);\n    if (found === null) {\n      nulls += 1;\n      return;\n    }\n    if (found === side) {\n      right += 1;\n      return;\n    }\n    wrong += 1;\n  });\n  console.log(`  [${side}]:`);\n  console.log(yellow(`      nulls:`), nulls.toLocaleString(), '  ', dim(percent(nulls, pairs.length)));\n  console.log(green(`      right:`), right.toLocaleString(), '  ', dim(percent(right, pairs.length)));\n  console.log(red(`      wrong:`), wrong.toLocaleString(), '  ', dim(percent(wrong, pairs.length)));\n};\nexport default testSide;","map":{"version":3,"names":["classify","green","str","red","yellow","dim","percent","part","total","num","Math","round","testSide","pairs","model","side","nulls","wrong","right","forEach","a","found","console","log","toLocaleString","length"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/suffix-thumb/src/test/classify.js"],"sourcesContent":["import classify from '../classify/index.js'\n\nconst green = str => '\\x1b[32m' + str + '\\x1b[0m'\nconst red = str => '\\x1b[31m' + str + '\\x1b[0m'\nconst yellow = str => '\\x1b[33m' + str + '\\x1b[0m'\nconst dim = str => '\\x1b[2m' + str + '\\x1b[0m'\n\nconst percent = (part, total) => {\n  let num = (part / total) * 100;\n  num = Math.round(num * 10) / 10;\n  return num + '%'\n};\n\nconst testSide = function (pairs, model, side) {\n  let nulls = 0\n  let wrong = 0\n  let right = 0\n  pairs.forEach((a) => {\n    let str = side === 'Left' ? a[0] : a[1]\n    let found = classify(str, model, true)\n    if (found === null) {\n      nulls += 1\n      return\n    }\n    if (found === side) {\n      right += 1\n      return\n    }\n    wrong += 1\n  })\n  console.log(`  [${side}]:`)\n  console.log(yellow(`      nulls:`), nulls.toLocaleString(), '  ', dim(percent(nulls, pairs.length)))\n  console.log(green(`      right:`), right.toLocaleString(), '  ', dim(percent(right, pairs.length)))\n  console.log(red(`      wrong:`), wrong.toLocaleString(), '  ', dim(percent(wrong, pairs.length)))\n}\nexport default testSide"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAE3C,MAAMC,KAAK,GAAGC,GAAG,IAAI,UAAU,GAAGA,GAAG,GAAG,SAAS;AACjD,MAAMC,GAAG,GAAGD,GAAG,IAAI,UAAU,GAAGA,GAAG,GAAG,SAAS;AAC/C,MAAME,MAAM,GAAGF,GAAG,IAAI,UAAU,GAAGA,GAAG,GAAG,SAAS;AAClD,MAAMG,GAAG,GAAGH,GAAG,IAAI,SAAS,GAAGA,GAAG,GAAG,SAAS;AAE9C,MAAMI,OAAO,GAAG,CAACC,IAAI,EAAEC,KAAK,KAAK;EAC/B,IAAIC,GAAG,GAAIF,IAAI,GAAGC,KAAK,GAAI,GAAG;EAC9BC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE;EAC/B,OAAOA,GAAG,GAAG,GAAG;AAClB,CAAC;AAED,MAAMG,QAAQ,GAAG,UAAUC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC7C,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACbL,KAAK,CAACM,OAAO,CAAEC,CAAC,IAAK;IACnB,IAAIlB,GAAG,GAAGa,IAAI,KAAK,MAAM,GAAGK,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IACvC,IAAIC,KAAK,GAAGrB,QAAQ,CAACE,GAAG,EAAEY,KAAK,EAAE,IAAI,CAAC;IACtC,IAAIO,KAAK,KAAK,IAAI,EAAE;MAClBL,KAAK,IAAI,CAAC;MACV;IACF;IACA,IAAIK,KAAK,KAAKN,IAAI,EAAE;MAClBG,KAAK,IAAI,CAAC;MACV;IACF;IACAD,KAAK,IAAI,CAAC;EACZ,CAAC,CAAC;EACFK,OAAO,CAACC,GAAG,CAAE,MAAKR,IAAK,IAAG,CAAC;EAC3BO,OAAO,CAACC,GAAG,CAACnB,MAAM,CAAE,cAAa,CAAC,EAAEY,KAAK,CAACQ,cAAc,EAAE,EAAE,IAAI,EAAEnB,GAAG,CAACC,OAAO,CAACU,KAAK,EAAEH,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC;EACpGH,OAAO,CAACC,GAAG,CAACtB,KAAK,CAAE,cAAa,CAAC,EAAEiB,KAAK,CAACM,cAAc,EAAE,EAAE,IAAI,EAAEnB,GAAG,CAACC,OAAO,CAACY,KAAK,EAAEL,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC;EACnGH,OAAO,CAACC,GAAG,CAACpB,GAAG,CAAE,cAAa,CAAC,EAAEc,KAAK,CAACO,cAAc,EAAE,EAAE,IAAI,EAAEnB,GAAG,CAACC,OAAO,CAACW,KAAK,EAAEJ,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC;AACnG,CAAC;AACD,eAAeb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}