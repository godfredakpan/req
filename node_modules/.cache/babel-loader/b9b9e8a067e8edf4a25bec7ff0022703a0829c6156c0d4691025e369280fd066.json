{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.policysimulator_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar policysimulator_v1;\n(function (policysimulator_v1) {\n  /**\n   * Policy Simulator API\n   *\n   *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members&#39; access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members&#39; access might change under the proposed policy.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const policysimulator = google.policysimulator('v1');\n   * ```\n   */\n  class Policysimulator {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.folders = new Resource$Folders(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.organizations = new Resource$Organizations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n  }\n  policysimulator_v1.Policysimulator = Policysimulator;\n  class Resource$Folders {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Folders$Locations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Folders = Resource$Folders;\n  class Resource$Folders$Locations {\n    constructor(context) {\n      this.context = context;\n      this.orgPolicyViolationsPreviews = new Resource$Folders$Locations$Orgpolicyviolationspreviews(this.context);\n      this.replays = new Resource$Folders$Locations$Replays(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations = Resource$Folders$Locations;\n  class Resource$Folders$Locations$Orgpolicyviolationspreviews {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations$Orgpolicyviolationspreviews = Resource$Folders$Locations$Orgpolicyviolationspreviews;\n  class Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations = Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations;\n  class Resource$Folders$Locations$Replays {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Folders$Locations$Replays$Operations(this.context);\n      this.results = new Resource$Folders$Locations$Replays$Results(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations$Replays = Resource$Folders$Locations$Replays;\n  class Resource$Folders$Locations$Replays$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations$Replays$Operations = Resource$Folders$Locations$Replays$Operations;\n  class Resource$Folders$Locations$Replays$Results {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Folders$Locations$Replays$Results = Resource$Folders$Locations$Replays$Results;\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Operations = Resource$Operations;\n  class Resource$Organizations {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Organizations$Locations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Organizations = Resource$Organizations;\n  class Resource$Organizations$Locations {\n    constructor(context) {\n      this.context = context;\n      this.orgPolicyViolationsPreviews = new Resource$Organizations$Locations$Orgpolicyviolationspreviews(this.context);\n      this.replays = new Resource$Organizations$Locations$Replays(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations = Resource$Organizations$Locations;\n  class Resource$Organizations$Locations$Orgpolicyviolationspreviews {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations$Orgpolicyviolationspreviews = Resource$Organizations$Locations$Orgpolicyviolationspreviews;\n  class Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations = Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations;\n  class Resource$Organizations$Locations$Replays {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Organizations$Locations$Replays$Operations(this.context);\n      this.results = new Resource$Organizations$Locations$Replays$Results(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations$Replays = Resource$Organizations$Locations$Replays;\n  class Resource$Organizations$Locations$Replays$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations$Replays$Operations = Resource$Organizations$Locations$Replays$Operations;\n  class Resource$Organizations$Locations$Replays$Results {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Organizations$Locations$Replays$Results = Resource$Organizations$Locations$Replays$Results;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Projects$Locations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.orgPolicyViolationsPreviews = new Resource$Projects$Locations$Orgpolicyviolationspreviews(this.context);\n      this.replays = new Resource$Projects$Locations$Replays(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n  class Resource$Projects$Locations$Orgpolicyviolationspreviews {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations$Orgpolicyviolationspreviews = Resource$Projects$Locations$Orgpolicyviolationspreviews;\n  class Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations = Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations;\n  class Resource$Projects$Locations$Replays {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Replays$Operations(this.context);\n      this.results = new Resource$Projects$Locations$Replays$Results(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations$Replays = Resource$Projects$Locations$Replays;\n  class Resource$Projects$Locations$Replays$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations$Replays$Operations = Resource$Projects$Locations$Replays$Operations;\n  class Resource$Projects$Locations$Replays$Results {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  policysimulator_v1.Resource$Projects$Locations$Replays$Results = Resource$Projects$Locations$Replays$Results;\n})(policysimulator_v1 = exports.policysimulator_v1 || (exports.policysimulator_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","policysimulator_v1","googleapis_common_1","require","Policysimulator","constructor","options","google","context","_options","folders","Resource$Folders","operations","Resource$Operations","organizations","Resource$Organizations","projects","Resource$Projects","locations","Resource$Folders$Locations","orgPolicyViolationsPreviews","Resource$Folders$Locations$Orgpolicyviolationspreviews","replays","Resource$Folders$Locations$Replays","Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Folders$Locations$Replays$Operations","results","Resource$Folders$Locations$Replays$Results","create","list","Resource$Organizations$Locations","Resource$Organizations$Locations$Orgpolicyviolationspreviews","Resource$Organizations$Locations$Replays","Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations","Resource$Organizations$Locations$Replays$Operations","Resource$Organizations$Locations$Replays$Results","Resource$Projects$Locations","Resource$Projects$Locations$Orgpolicyviolationspreviews","Resource$Projects$Locations$Replays","Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations","Resource$Projects$Locations$Replays$Operations","Resource$Projects$Locations$Replays$Results"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/googleapis/build/src/apis/policysimulator/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.policysimulator_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar policysimulator_v1;\n(function (policysimulator_v1) {\n    /**\n     * Policy Simulator API\n     *\n     *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members&#39; access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members&#39; access might change under the proposed policy.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const policysimulator = google.policysimulator('v1');\n     * ```\n     */\n    class Policysimulator {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.folders = new Resource$Folders(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    policysimulator_v1.Policysimulator = Policysimulator;\n    class Resource$Folders {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Folders$Locations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Folders = Resource$Folders;\n    class Resource$Folders$Locations {\n        constructor(context) {\n            this.context = context;\n            this.orgPolicyViolationsPreviews =\n                new Resource$Folders$Locations$Orgpolicyviolationspreviews(this.context);\n            this.replays = new Resource$Folders$Locations$Replays(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations = Resource$Folders$Locations;\n    class Resource$Folders$Locations$Orgpolicyviolationspreviews {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations$Orgpolicyviolationspreviews = Resource$Folders$Locations$Orgpolicyviolationspreviews;\n    class Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations = Resource$Folders$Locations$Orgpolicyviolationspreviews$Operations;\n    class Resource$Folders$Locations$Replays {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Folders$Locations$Replays$Operations(this.context);\n            this.results = new Resource$Folders$Locations$Replays$Results(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations$Replays = Resource$Folders$Locations$Replays;\n    class Resource$Folders$Locations$Replays$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations$Replays$Operations = Resource$Folders$Locations$Replays$Operations;\n    class Resource$Folders$Locations$Replays$Results {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Folders$Locations$Replays$Results = Resource$Folders$Locations$Replays$Results;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Operations = Resource$Operations;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Organizations$Locations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Locations {\n        constructor(context) {\n            this.context = context;\n            this.orgPolicyViolationsPreviews =\n                new Resource$Organizations$Locations$Orgpolicyviolationspreviews(this.context);\n            this.replays = new Resource$Organizations$Locations$Replays(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations = Resource$Organizations$Locations;\n    class Resource$Organizations$Locations$Orgpolicyviolationspreviews {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations$Orgpolicyviolationspreviews = Resource$Organizations$Locations$Orgpolicyviolationspreviews;\n    class Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations = Resource$Organizations$Locations$Orgpolicyviolationspreviews$Operations;\n    class Resource$Organizations$Locations$Replays {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Organizations$Locations$Replays$Operations(this.context);\n            this.results = new Resource$Organizations$Locations$Replays$Results(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations$Replays = Resource$Organizations$Locations$Replays;\n    class Resource$Organizations$Locations$Replays$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations$Replays$Operations = Resource$Organizations$Locations$Replays$Operations;\n    class Resource$Organizations$Locations$Replays$Results {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Organizations$Locations$Replays$Results = Resource$Organizations$Locations$Replays$Results;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Projects$Locations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.orgPolicyViolationsPreviews =\n                new Resource$Projects$Locations$Orgpolicyviolationspreviews(this.context);\n            this.replays = new Resource$Projects$Locations$Replays(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Orgpolicyviolationspreviews {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations(this.context);\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations$Orgpolicyviolationspreviews = Resource$Projects$Locations$Orgpolicyviolationspreviews;\n    class Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations = Resource$Projects$Locations$Orgpolicyviolationspreviews$Operations;\n    class Resource$Projects$Locations$Replays {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Replays$Operations(this.context);\n            this.results = new Resource$Projects$Locations$Replays$Results(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/replays').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations$Replays = Resource$Projects$Locations$Replays;\n    class Resource$Projects$Locations$Replays$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations$Replays$Operations = Resource$Projects$Locations$Replays$Operations;\n    class Resource$Projects$Locations$Replays$Results {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://policysimulator.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/results').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    policysimulator_v1.Resource$Projects$Locations$Replays$Results = Resource$Projects$Locations$Replays$Results;\n})(policysimulator_v1 = exports.policysimulator_v1 || (exports.policysimulator_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}