{"ast":null,"code":"const api = function (View) {\n  class Pronouns extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Pronouns';\n    }\n    // get the noun-phrase this pronoun refers to\n    refersTo() {\n      return this.map(m => {\n        if (!m.found) {\n          return m.none();\n        }\n        let term = m.docs[0][0];\n        if (term.reference) {\n          return m.update([term.reference]);\n        }\n        return m.none();\n      });\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Pronouns(this.document, pointer);\n      m._cache = this._cache; // share this full thing\n      return m;\n    }\n  }\n  View.prototype.pronouns = function (n) {\n    let m = this.match('#Pronoun');\n    m = m.getNth(n);\n    return new Pronouns(m.document, m.pointer);\n  };\n};\nexport default api;","map":{"version":3,"names":["api","View","Pronouns","constructor","document","pointer","groups","viewType","refersTo","map","m","found","none","term","docs","reference","update","_cache","prototype","pronouns","n","match","getNth"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/3-three/coreference/api/pronouns.js"],"sourcesContent":["const api = function (View) {\n\n  class Pronouns extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Pronouns'\n    }\n    // get the noun-phrase this pronoun refers to\n    refersTo() {\n      return this.map(m => {\n        if (!m.found) {\n          return m.none()\n        }\n        let term = m.docs[0][0]\n        if (term.reference) {\n          return m.update([term.reference])\n        }\n        return m.none()\n      })\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Pronouns(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n\n  View.prototype.pronouns = function (n) {\n    let m = this.match('#Pronoun')\n    m = m.getNth(n)\n    return new Pronouns(m.document, m.pointer)\n  }\n}\nexport default api\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,UAAUC,IAAI,EAAE;EAE1B,MAAMC,QAAQ,SAASD,IAAI,CAAC;IAC1BE,WAAW,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,KAAK,CAACF,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAChC,IAAI,CAACC,QAAQ,GAAG,UAAU;IAC5B;IACA;IACAC,QAAQ,GAAG;MACT,OAAO,IAAI,CAACC,GAAG,CAACC,CAAC,IAAI;QACnB,IAAI,CAACA,CAAC,CAACC,KAAK,EAAE;UACZ,OAAOD,CAAC,CAACE,IAAI,EAAE;QACjB;QACA,IAAIC,IAAI,GAAGH,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvB,IAAID,IAAI,CAACE,SAAS,EAAE;UAClB,OAAOL,CAAC,CAACM,MAAM,CAAC,CAACH,IAAI,CAACE,SAAS,CAAC,CAAC;QACnC;QACA,OAAOL,CAAC,CAACE,IAAI,EAAE;MACjB,CAAC,CAAC;IACJ;IACA;IACAI,MAAM,CAACX,OAAO,EAAE;MACd,IAAIK,CAAC,GAAG,IAAIR,QAAQ,CAAC,IAAI,CAACE,QAAQ,EAAEC,OAAO,CAAC;MAC5CK,CAAC,CAACO,MAAM,GAAG,IAAI,CAACA,MAAM,EAAC;MACvB,OAAOP,CAAC;IACV;EACF;EAEAT,IAAI,CAACiB,SAAS,CAACC,QAAQ,GAAG,UAAUC,CAAC,EAAE;IACrC,IAAIV,CAAC,GAAG,IAAI,CAACW,KAAK,CAAC,UAAU,CAAC;IAC9BX,CAAC,GAAGA,CAAC,CAACY,MAAM,CAACF,CAAC,CAAC;IACf,OAAO,IAAIlB,QAAQ,CAACQ,CAAC,CAACN,QAAQ,EAAEM,CAAC,CAACL,OAAO,CAAC;EAC5C,CAAC;AACH,CAAC;AACD,eAAeL,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}