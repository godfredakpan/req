{"ast":null,"code":"const banList = {\n  that: true,\n  there: true,\n  let: true,\n  here: true,\n  everywhere: true\n};\nconst beforePossessive = {\n  in: true,\n  //in sunday's\n  by: true,\n  //by sunday's\n  for: true //for sunday's\n};\n\nconst isPossessive = (terms, i) => {\n  let term = terms[i];\n  // these can't be possessive\n  if (banList.hasOwnProperty(term.machine || term.normal)) {\n    return false;\n  }\n  // if we already know it\n  if (term.tags.has('Possessive')) {\n    return true;\n  }\n  // who's\n  if (term.tags.has('QuestionWord')) {\n    return false;\n  }\n  // some pronouns are never possessive\n  if (term.normal === `he's` || term.normal === `she's`) {\n    return false;\n  }\n  //if end of sentence, it is possessive - \"was spencer's\"\n  let nextTerm = terms[i + 1];\n  if (!nextTerm) {\n    return true;\n  }\n  // \"it's a life\" vs \"run it's business\"\n  if (term.normal === `it's`) {\n    if (nextTerm.tags.has('#Noun')) {\n      return true;\n    }\n    return false;\n  }\n  //a gerund suggests 'is walking'\n  if (nextTerm.tags.has('Verb')) {\n    //fix 'jamie's bite'\n    if (nextTerm.tags.has('Infinitive')) {\n      return true;\n    }\n    //fix 'spencer's runs'\n    if (nextTerm.tags.has('PresentTense')) {\n      return true;\n    }\n    return false;\n  }\n  //spencer's house\n  if (nextTerm.tags.has('Noun')) {\n    let nextStr = nextTerm.machine || nextTerm.normal;\n    // 'spencer's here'\n    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {\n      return false;\n    }\n    // the chair's his\n    if (nextTerm.tags.has('Possessive')) {\n      return false;\n    }\n    // the captain's John \n    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {\n      return false;\n    }\n    return true;\n  }\n  // by sunday's final\n  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {\n    return true;\n  }\n  //rocket's red glare\n  let twoTerm = terms[i + 2];\n  if (twoTerm && twoTerm.tags.has('Noun') && !twoTerm.tags.has('Pronoun')) {\n    return true;\n  }\n  //othwerwise, an adjective suggests 'is good'\n  if (nextTerm.tags.has('Adjective') || nextTerm.tags.has('Adverb') || nextTerm.tags.has('Verb')) {\n    return false;\n  }\n  return false;\n};\nexport default isPossessive;","map":{"version":3,"names":["banList","that","there","let","here","everywhere","beforePossessive","in","by","for","isPossessive","terms","i","term","hasOwnProperty","machine","normal","tags","has","nextTerm","nextStr","twoTerm"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/2-two/contraction-two/compute/isPossessive.js"],"sourcesContent":["const banList = {\n  that: true,\n  there: true,\n  let: true,\n  here: true,\n  everywhere: true,\n}\n\nconst beforePossessive = {\n  in: true,//in sunday's\n  by: true,//by sunday's\n  for: true,//for sunday's\n}\n\nconst isPossessive = (terms, i) => {\n  let term = terms[i]\n  // these can't be possessive\n  if (banList.hasOwnProperty(term.machine || term.normal)) {\n    return false\n  }\n  // if we already know it\n  if (term.tags.has('Possessive')) {\n    return true\n  }\n  // who's\n  if (term.tags.has('QuestionWord')) {\n    return false\n  }\n  // some pronouns are never possessive\n  if (term.normal === `he's` || term.normal === `she's`) {\n    return false\n  }\n  //if end of sentence, it is possessive - \"was spencer's\"\n  let nextTerm = terms[i + 1]\n  if (!nextTerm) {\n    return true\n  }\n  // \"it's a life\" vs \"run it's business\"\n  if (term.normal === `it's`) {\n    if (nextTerm.tags.has('#Noun')) {\n      return true\n    }\n    return false\n  }\n  //a gerund suggests 'is walking'\n  if (nextTerm.tags.has('Verb')) {\n    //fix 'jamie's bite'\n    if (nextTerm.tags.has('Infinitive')) {\n      return true\n    }\n    //fix 'spencer's runs'\n    if (nextTerm.tags.has('PresentTense')) {\n      return true\n    }\n    return false\n  }\n  //spencer's house\n  if (nextTerm.tags.has('Noun')) {\n    let nextStr = nextTerm.machine || nextTerm.normal\n    // 'spencer's here'\n    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {\n      return false\n    }\n    // the chair's his\n    if (nextTerm.tags.has('Possessive')) {\n      return false\n    }\n    // the captain's John \n    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {\n      return false\n    }\n    return true\n  }\n  // by sunday's final\n  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {\n    return true\n  }\n  //rocket's red glare\n  let twoTerm = terms[i + 2]\n  if (twoTerm && twoTerm.tags.has('Noun') && !twoTerm.tags.has('Pronoun')) {\n    return true\n  }\n  //othwerwise, an adjective suggests 'is good'\n  if (nextTerm.tags.has('Adjective') || nextTerm.tags.has('Adverb') || nextTerm.tags.has('Verb')) {\n    return false\n  }\n  return false\n}\nexport default isPossessive\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}