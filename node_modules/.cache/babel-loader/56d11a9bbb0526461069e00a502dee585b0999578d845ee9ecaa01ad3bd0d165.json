{"ast":null,"code":"'use strict';\n\nmodule.exports = annotate;\nfunction annotate(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Could not parse function signature for injection dependencies: Object is not a function');\n  }\n  if (!fn.length) return [];\n  var injects = /^()\\(?([^)=]*)\\)? *=>/.exec(fn + '') || /^[^(]+([^ \\(]*) *\\(([^\\)]*)\\)/.exec(fn + '');\n  if (!injects) {\n    throw new Error('Could not parse function signature for injection dependencies: ' + fn + '');\n  }\n  var argumentString = injects[2]\n\n  // Strip multi-line comments:\n  // Uses the lazy-quantifier (.*?): http://www.rexegg.com/regex-quantifiers.html#lazy_solution\n  .replace(/\\/\\*[\\S\\s]*?\\*\\//g, ' ')\n\n  // Strip single-line comments:\n  .replace(/\\/\\/.*/g, ' ');\n  function groupSubArguments(_, type, keys) {\n    return type + keys.split(',').map(function (arg) {\n      return arg && arg.trim();\n    }).filter(Boolean).join('@');\n  }\n  argumentString = argumentString.replace(/(\\{)([^}]*)\\}/g, groupSubArguments);\n  argumentString = argumentString.replace(/(\\[)([^}]*)\\]/g, groupSubArguments);\n  return argumentString.split(',').map(function (arg) {\n    return arg && arg.trim();\n  }).map(function (arg) {\n    if (arg[0] === '{') {\n      return arg.substring(1).split('@');\n    }\n    if (arg[0] === '[') {\n      return {\n        items: arg.substring(1).split('@')\n      };\n    }\n    return arg;\n  }).filter(Boolean);\n}","map":{"version":3,"names":["module","exports","annotate","fn","Error","length","injects","exec","argumentString","replace","groupSubArguments","_","type","keys","split","map","arg","trim","filter","Boolean","join","substring","items"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/fn-annotate/index.js"],"sourcesContent":["'use strict';\n\nmodule.exports = annotate;\n\nfunction annotate(fn) {\n\n  if (typeof fn !== 'function') {\n    throw new Error('Could not parse function signature for injection dependencies: Object is not a function');\n  }\n\n  if (!fn.length) return [];\n\n  var injects = /^()\\(?([^)=]*)\\)? *=>/.exec(fn + '') ||\n                /^[^(]+([^ \\(]*) *\\(([^\\)]*)\\)/.exec(fn + '');\n\n  if (!injects) {\n    throw new Error('Could not parse function signature for injection dependencies: ' + fn + '');\n  }\n\n  var argumentString = injects[2]\n\n  // Strip multi-line comments:\n  // Uses the lazy-quantifier (.*?): http://www.rexegg.com/regex-quantifiers.html#lazy_solution\n  .replace(/\\/\\*[\\S\\s]*?\\*\\//g, ' ')\n\n  // Strip single-line comments:\n  .replace(/\\/\\/.*/g, ' ');\n\n  function groupSubArguments(_, type, keys) {\n    return type + keys.split(',')\n    .map(function (arg) {\n      return arg && arg.trim();\n    })\n    .filter(Boolean)\n    .join('@');\n  }\n\n  argumentString = argumentString.replace(/(\\{)([^}]*)\\}/g, groupSubArguments);\n  argumentString = argumentString.replace(/(\\[)([^}]*)\\]/g, groupSubArguments);\n\n  return argumentString.split(',')\n  .map(function (arg) {\n    return arg && arg.trim();\n  })\n  .map(function (arg) {\n    if (arg[0] === '{') {\n      return arg.substring(1).split('@');\n    }\n    if (arg[0] === '[') {\n      return { items: arg.substring(1).split('@') };\n    }\n    return arg;\n  })\n  .filter(Boolean);\n\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQ,CAACC,EAAE,EAAE;EAEpB,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,yFAAyF,CAAC;EAC5G;EAEA,IAAI,CAACD,EAAE,CAACE,MAAM,EAAE,OAAO,EAAE;EAEzB,IAAIC,OAAO,GAAG,uBAAuB,CAACC,IAAI,CAACJ,EAAE,GAAG,EAAE,CAAC,IACrC,+BAA+B,CAACI,IAAI,CAACJ,EAAE,GAAG,EAAE,CAAC;EAE3D,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIF,KAAK,CAAC,iEAAiE,GAAGD,EAAE,GAAG,EAAE,CAAC;EAC9F;EAEA,IAAIK,cAAc,GAAGF,OAAO,CAAC,CAAC;;EAE9B;EACA;EAAA,CACCG,OAAO,CAAC,mBAAmB,EAAE,GAAG;;EAEjC;EAAA,CACCA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;EAExB,SAASC,iBAAiB,CAACC,CAAC,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACxC,OAAOD,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAC5BC,GAAG,CAAC,UAAUC,GAAG,EAAE;MAClB,OAAOA,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE;IAC1B,CAAC,CAAC,CACDC,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,GAAG,CAAC;EACZ;EAEAZ,cAAc,GAAGA,cAAc,CAACC,OAAO,CAAC,gBAAgB,EAAEC,iBAAiB,CAAC;EAC5EF,cAAc,GAAGA,cAAc,CAACC,OAAO,CAAC,gBAAgB,EAAEC,iBAAiB,CAAC;EAE5E,OAAOF,cAAc,CAACM,KAAK,CAAC,GAAG,CAAC,CAC/BC,GAAG,CAAC,UAAUC,GAAG,EAAE;IAClB,OAAOA,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE;EAC1B,CAAC,CAAC,CACDF,GAAG,CAAC,UAAUC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAClB,OAAOA,GAAG,CAACK,SAAS,CAAC,CAAC,CAAC,CAACP,KAAK,CAAC,GAAG,CAAC;IACpC;IACA,IAAIE,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAClB,OAAO;QAAEM,KAAK,EAAEN,GAAG,CAACK,SAAS,CAAC,CAAC,CAAC,CAACP,KAAK,CAAC,GAAG;MAAE,CAAC;IAC/C;IACA,OAAOE,GAAG;EACZ,CAAC,CAAC,CACDE,MAAM,CAACC,OAAO,CAAC;AAElB"},"metadata":{},"sourceType":"script","externalDependencies":[]}