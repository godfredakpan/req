{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\nfunction FaunaError(name, message, description) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else this.stack = new Error().stack;\n\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n  this.message = message;\n\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n  this.description = description;\n}\nutil.inherits(FaunaError, Error);\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message);\n}\nutil.inherits(InvalidValue, FaunaError);\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = `${callerFunc} function requires ${messageForArity(min, max)} argument(s) but ${actual} were given`;\n  var documentationLink = logDocumentationLink(callerFunc);\n  FaunaError.call(this, 'InvalidArity', `${arityInfo}\\n${documentationLink}`);\n\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n  this.min = min;\n\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n  this.max = max;\n\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n  this.actual = actual;\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min;\n    if (min === null) return 'up to ' + max;\n    if (min === max) return min;\n    return 'from ' + min + ' to ' + max;\n  }\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/';\n    return `For more info, see the docs: ${docsURL}${functionName.toLowerCase()}`;\n  }\n}\nutil.inherits(InvalidArity, FaunaError);\n\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent;\n  var errors = response.errors;\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code;\n  var description = errors.length === 0 ? '(empty \"errors\")' : errors[0].description;\n  FaunaError.call(this, name, message, description);\n\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n  this.requestResult = requestResult;\n}\nutil.inherits(FaunaHTTPError, FaunaError);\n\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\nFaunaHTTPError.prototype.errors = function () {\n  return this.requestResult.responseContent.errors;\n};\n\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\nFaunaHTTPError.raiseForStatusCode = function (requestResult) {\n  var code = requestResult.statusCode;\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult);\n      case 401:\n        throw new Unauthorized(requestResult);\n      case 403:\n        throw new PermissionDenied(requestResult);\n      case 404:\n        throw new NotFound(requestResult);\n      case 405:\n        throw new MethodNotAllowed(requestResult);\n      case 429:\n        throw new TooManyRequests(requestResult);\n      case 500:\n        throw new InternalError(requestResult);\n      case 503:\n        throw new UnavailableError(requestResult);\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult);\n    }\n  }\n};\n\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult);\n}\nutil.inherits(BadRequest, FaunaHTTPError);\n\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult);\n  this.message = this.message += '. Check that endpoint, schema, port and secret are correct during clientâ€™s instantiation';\n}\nutil.inherits(Unauthorized, FaunaHTTPError);\n\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult);\n}\nutil.inherits(PermissionDenied, FaunaHTTPError);\n\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult);\n}\nutil.inherits(NotFound, FaunaHTTPError);\n\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult);\n}\nutil.inherits(MethodNotAllowed, FaunaHTTPError);\n\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult);\n}\nutil.inherits(TooManyRequests, FaunaHTTPError);\n\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult);\n}\nutil.inherits(InternalError, FaunaHTTPError);\n\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult);\n}\nutil.inherits(UnavailableError, FaunaHTTPError);\n\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description);\n}\nutil.inherits(StreamError, FaunaError);\n\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\nfunction StreamsNotSupported(description) {\n  FaunaError.call(this, 'StreamsNotSupported', 'streams not supported', description);\n}\nutil.inherits(StreamsNotSupported, StreamError);\n\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\nfunction StreamErrorEvent(event) {\n  var error = event.data || {};\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description);\n  this.event = event;\n}\nutil.inherits(StreamErrorEvent, StreamError);\n\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description);\n}\nutil.inherits(ClientClosed, FaunaError);\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent\n};","map":{"version":3,"names":["util","require","FaunaError","name","message","description","Error","call","captureStackTrace","constructor","stack","inherits","InvalidValue","InvalidArity","min","max","actual","callerFunc","arityInfo","messageForArity","documentationLink","logDocumentationLink","functionName","docsURL","toLowerCase","FaunaHTTPError","requestResult","response","responseContent","errors","length","code","prototype","raiseForStatusCode","statusCode","BadRequest","Unauthorized","PermissionDenied","NotFound","MethodNotAllowed","TooManyRequests","InternalError","UnavailableError","StreamError","StreamsNotSupported","StreamErrorEvent","event","error","data","ClientClosed","module","exports"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/faunadb/src/errors.js"],"sourcesContent":["'use strict'\n\nvar util = require('./_util')\n\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\nfunction FaunaError(name, message, description) {\n  Error.call(this)\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor)\n  } else this.stack = new Error().stack\n\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n  this.name = name\n\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n  this.message = message\n\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n  this.description = description\n}\n\nutil.inherits(FaunaError, Error)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message)\n}\n\nutil.inherits(InvalidValue, FaunaError)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = `${callerFunc} function requires ${messageForArity(\n    min,\n    max\n  )} argument(s) but ${actual} were given`\n  var documentationLink = logDocumentationLink(callerFunc)\n\n  FaunaError.call(this, 'InvalidArity', `${arityInfo}\\n${documentationLink}`)\n\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n  this.min = min\n\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n  this.max = max\n\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n  this.actual = actual\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min\n    if (min === null) return 'up to ' + max\n    if (min === max) return min\n    return 'from ' + min + ' to ' + max\n  }\n\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/'\n    return `For more info, see the docs: ${docsURL}${functionName.toLowerCase()}`\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError)\n\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent\n  var errors = response.errors\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code\n  var description =\n    errors.length === 0 ? '(empty \"errors\")' : errors[0].description\n  FaunaError.call(this, name, message, description)\n\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n  this.requestResult = requestResult\n}\n\nutil.inherits(FaunaHTTPError, FaunaError)\n\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\nFaunaHTTPError.prototype.errors = function() {\n  return this.requestResult.responseContent.errors\n}\n\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\nFaunaHTTPError.raiseForStatusCode = function(requestResult) {\n  var code = requestResult.statusCode\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult)\n      case 401:\n        throw new Unauthorized(requestResult)\n      case 403:\n        throw new PermissionDenied(requestResult)\n      case 404:\n        throw new NotFound(requestResult)\n      case 405:\n        throw new MethodNotAllowed(requestResult)\n      case 429:\n        throw new TooManyRequests(requestResult)\n      case 500:\n        throw new InternalError(requestResult)\n      case 503:\n        throw new UnavailableError(requestResult)\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult)\n    }\n  }\n}\n\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult)\n}\n\nutil.inherits(BadRequest, FaunaHTTPError)\n\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult)\n  this.message = this.message +=\n    '. Check that endpoint, schema, port and secret are correct during clientâ€™s instantiation'\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError)\n\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult)\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError)\n\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult)\n}\n\nutil.inherits(NotFound, FaunaHTTPError)\n\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult)\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError)\n\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult)\n}\n\nutil.inherits(TooManyRequests, FaunaHTTPError)\n\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult)\n}\n\nutil.inherits(InternalError, FaunaHTTPError)\n\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult)\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError)\n\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description)\n}\n\nutil.inherits(StreamError, FaunaError)\n\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\nfunction StreamsNotSupported(description) {\n  FaunaError.call(\n    this,\n    'StreamsNotSupported',\n    'streams not supported',\n    description\n  )\n}\n\nutil.inherits(StreamsNotSupported, StreamError)\n\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\nfunction StreamErrorEvent(event) {\n  var error = event.data || {}\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description)\n  this.event = event\n}\n\nutil.inherits(StreamErrorEvent, StreamError)\n\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description)\n}\n\nutil.inherits(ClientClosed, FaunaError)\n\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}