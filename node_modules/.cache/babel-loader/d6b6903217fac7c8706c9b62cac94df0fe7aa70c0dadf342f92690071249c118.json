{"ast":null,"code":"import methods from '../../methods/index.js';\nimport expandIrregulars from './irregulars.js';\nimport expandModels from './models.js';\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js';\nimport conjugate from '../../methods/transform/verbs/conjugate/index.js';\nimport { toSuperlative, toComparative } from '../../methods/transform/adjectives/inflect.js';\nimport toInfinitive from '../../methods/transform/verbs/toInfinitive/index.js';\nimport models from '../models/index.js';\nlet tmpModel = {\n  two: {\n    models\n  }\n};\n\n// defaults for switches\nconst switchDefaults = {\n  // 'amusing'\n  'Adj|Gerund': 'Adjective',\n  //+conjugations\n  // 'standard'\n  'Adj|Noun': 'Adjective',\n  // 'boiled'\n  'Adj|Past': 'Adjective',\n  //+conjugations\n  // 'smooth'\n  'Adj|Present': 'Adjective',\n  //+conjugations\n  // 'box'\n  'Noun|Verb': 'Singular',\n  //+conjugations (no-present)\n  //'singing'\n  'Noun|Gerund': 'Gerund',\n  //+conjugations\n  // 'hope'\n  'Person|Noun': 'Noun',\n  // 'April'\n  'Person|Date': 'Month',\n  // 'rob'\n  'Person|Verb': 'FirstName',\n  //+conjugations\n  // 'victoria'\n  'Person|Place': 'Person',\n  // 'boxes'\n  'Plural|Verb': 'Plural',\n  //(these are already derivative)\n  // 'miles'\n  'Unit|Noun': 'Noun'\n};\nconst expandLexicon = function (words, model) {\n  // do clever tricks to grow the words\n  const world = {\n    model,\n    methods\n  };\n  let {\n    lex,\n    _multi\n  } = methods.two.expandLexicon(words, world);\n  // store multiple-word terms in a cache\n  Object.assign(model.one.lexicon, lex);\n  Object.assign(model.one._multiCache, _multi);\n  return model;\n};\n\n// these words have no singular/plural conjugation\nconst addUncountables = function (words, model) {\n  Object.keys(words).forEach(k => {\n    if (words[k] === 'Uncountable') {\n      model.two.uncountable[k] = true;\n      words[k] = 'Uncountable';\n    }\n  });\n  return model;\n};\nconst expandVerb = function (str, words, doPresent) {\n  let obj = conjugate(str, tmpModel);\n  words[obj.PastTense] = words[obj.PastTense] || 'PastTense';\n  words[obj.Gerund] = words[obj.Gerund] || 'Gerund';\n  if (doPresent === true) {\n    // is this plural noun, or present-tense?\n    words[obj.PresentTense] = words[obj.PresentTense] || 'PresentTense';\n  }\n};\nconst expandAdjective = function (str, words, model) {\n  let sup = toSuperlative(str, model);\n  words[sup] = words[sup] || 'Superlative';\n  let comp = toComparative(str, model);\n  words[comp] = words[comp] || 'Comparative';\n};\nconst expandNoun = function (str, words, model) {\n  let plur = toPlural(str, model);\n  words[plur] = words[plur] || 'Plural';\n};\n\n// harvest ambiguous words for any conjugations\nconst expandVariable = function (switchWords, model) {\n  let words = {};\n  const lex = model.one.lexicon;\n  //add first tag as an assumption for each variable word\n  Object.keys(switchWords).forEach(w => {\n    const name = switchWords[w];\n    words[w] = switchDefaults[name];\n    // conjugate some verbs\n    if (name === 'Noun|Verb' || name === 'Person|Verb') {\n      expandVerb(w, lex, false);\n    }\n    if (name === 'Adj|Present') {\n      expandVerb(w, lex, true);\n      expandAdjective(w, lex, model);\n    }\n    // add infinitives for gerunds\n    if (name === 'Adj|Gerund' || name === 'Noun|Gerund') {\n      let inf = toInfinitive(w, tmpModel, 'Gerund');\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive'; //expand it later\n      }\n    }\n    // add plurals for nouns\n    if (name === 'Noun|Gerund' || name === 'Adj|Noun' || name === 'Person|Noun') {\n      expandNoun(w, lex, model);\n    }\n    if (name === 'Adj|Past') {\n      let inf = toInfinitive(w, tmpModel, 'PastTense');\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive'; //expand it later\n      }\n    }\n  });\n  // add conjugations\n  model = expandLexicon(words, model);\n  return model;\n};\nconst expand = function (model) {\n  model = expandLexicon(model.one.lexicon, model);\n  model = addUncountables(model.one.lexicon, model);\n  model = expandVariable(model.two.switches, model);\n  model = expandModels(model);\n  model = expandIrregulars(model);\n  return model;\n};\nexport default expand;","map":{"version":3,"names":["methods","expandIrregulars","expandModels","toPlural","conjugate","toSuperlative","toComparative","toInfinitive","models","tmpModel","two","switchDefaults","expandLexicon","words","model","world","lex","_multi","Object","assign","one","lexicon","_multiCache","addUncountables","keys","forEach","k","uncountable","expandVerb","str","doPresent","obj","PastTense","Gerund","PresentTense","expandAdjective","sup","comp","expandNoun","plur","expandVariable","switchWords","w","name","inf","expand","switches"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/2-two/preTagger/model/_expand/index.js"],"sourcesContent":["import methods from '../../methods/index.js'\nimport expandIrregulars from './irregulars.js'\nimport expandModels from './models.js'\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js'\nimport conjugate from '../../methods/transform/verbs/conjugate/index.js'\nimport { toSuperlative, toComparative } from '../../methods/transform/adjectives/inflect.js'\nimport toInfinitive from '../../methods/transform/verbs/toInfinitive/index.js'\nimport models from '../models/index.js'\nlet tmpModel = {\n  two: { models }\n}\n\n// defaults for switches\nconst switchDefaults = {\n  // 'amusing'\n  'Adj|Gerund': 'Adjective', //+conjugations\n  // 'standard'\n  'Adj|Noun': 'Adjective',\n  // 'boiled'\n  'Adj|Past': 'Adjective', //+conjugations\n  // 'smooth'\n  'Adj|Present': 'Adjective',//+conjugations\n  // 'box'\n  'Noun|Verb': 'Singular', //+conjugations (no-present)\n  //'singing'\n  'Noun|Gerund': 'Gerund', //+conjugations\n  // 'hope'\n  'Person|Noun': 'Noun',\n  // 'April'\n  'Person|Date': 'Month',\n  // 'rob'\n  'Person|Verb': 'FirstName',//+conjugations\n  // 'victoria'\n  'Person|Place': 'Person',\n  // 'boxes'\n  'Plural|Verb': 'Plural', //(these are already derivative)\n  // 'miles'\n  'Unit|Noun': 'Noun',\n}\n\nconst expandLexicon = function (words, model) {\n  // do clever tricks to grow the words\n  const world = { model, methods }\n  let { lex, _multi } = methods.two.expandLexicon(words, world)\n  // store multiple-word terms in a cache\n  Object.assign(model.one.lexicon, lex)\n  Object.assign(model.one._multiCache, _multi)\n  return model\n}\n\n// these words have no singular/plural conjugation\nconst addUncountables = function (words, model) {\n  Object.keys(words).forEach(k => {\n    if (words[k] === 'Uncountable') {\n      model.two.uncountable[k] = true\n      words[k] = 'Uncountable'\n    }\n  })\n  return model\n}\n\nconst expandVerb = function (str, words, doPresent) {\n  let obj = conjugate(str, tmpModel)\n  words[obj.PastTense] = words[obj.PastTense] || 'PastTense'\n  words[obj.Gerund] = words[obj.Gerund] || 'Gerund'\n  if (doPresent === true) {\n    // is this plural noun, or present-tense?\n    words[obj.PresentTense] = words[obj.PresentTense] || 'PresentTense'\n  }\n}\n\nconst expandAdjective = function (str, words, model) {\n  let sup = toSuperlative(str, model)\n  words[sup] = words[sup] || 'Superlative'\n  let comp = toComparative(str, model)\n  words[comp] = words[comp] || 'Comparative'\n}\n\nconst expandNoun = function (str, words, model) {\n  let plur = toPlural(str, model)\n  words[plur] = words[plur] || 'Plural'\n}\n\n// harvest ambiguous words for any conjugations\nconst expandVariable = function (switchWords, model) {\n  let words = {}\n  const lex = model.one.lexicon\n  //add first tag as an assumption for each variable word\n  Object.keys(switchWords).forEach(w => {\n    const name = switchWords[w]\n    words[w] = switchDefaults[name]\n    // conjugate some verbs\n    if (name === 'Noun|Verb' || name === 'Person|Verb') {\n      expandVerb(w, lex, false)\n    }\n    if (name === 'Adj|Present') {\n      expandVerb(w, lex, true)\n      expandAdjective(w, lex, model)\n    }\n    // add infinitives for gerunds\n    if (name === 'Adj|Gerund' || name === 'Noun|Gerund') {\n      let inf = toInfinitive(w, tmpModel, 'Gerund')\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive' //expand it later\n      }\n    }\n    // add plurals for nouns\n    if (name === 'Noun|Gerund' || name === 'Adj|Noun' || name === 'Person|Noun') {\n      expandNoun(w, lex, model)\n    }\n    if (name === 'Adj|Past') {\n      let inf = toInfinitive(w, tmpModel, 'PastTense')\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive' //expand it later\n      }\n    }\n  })\n  // add conjugations\n  model = expandLexicon(words, model)\n  return model\n}\n\nconst expand = function (model) {\n  model = expandLexicon(model.one.lexicon, model)\n  model = addUncountables(model.one.lexicon, model)\n  model = expandVariable(model.two.switches, model)\n  model = expandModels(model)\n  model = expandIrregulars(model)\n  return model\n}\nexport default expand\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,gBAAgB,MAAM,iBAAiB;AAC9C,OAAOC,YAAY,MAAM,aAAa;AACtC,OAAOC,QAAQ,MAAM,iDAAiD;AACtE,OAAOC,SAAS,MAAM,kDAAkD;AACxE,SAASC,aAAa,EAAEC,aAAa,QAAQ,+CAA+C;AAC5F,OAAOC,YAAY,MAAM,qDAAqD;AAC9E,OAAOC,MAAM,MAAM,oBAAoB;AACvC,IAAIC,QAAQ,GAAG;EACbC,GAAG,EAAE;IAAEF;EAAO;AAChB,CAAC;;AAED;AACA,MAAMG,cAAc,GAAG;EACrB;EACA,YAAY,EAAE,WAAW;EAAE;EAC3B;EACA,UAAU,EAAE,WAAW;EACvB;EACA,UAAU,EAAE,WAAW;EAAE;EACzB;EACA,aAAa,EAAE,WAAW;EAAC;EAC3B;EACA,WAAW,EAAE,UAAU;EAAE;EACzB;EACA,aAAa,EAAE,QAAQ;EAAE;EACzB;EACA,aAAa,EAAE,MAAM;EACrB;EACA,aAAa,EAAE,OAAO;EACtB;EACA,aAAa,EAAE,WAAW;EAAC;EAC3B;EACA,cAAc,EAAE,QAAQ;EACxB;EACA,aAAa,EAAE,QAAQ;EAAE;EACzB;EACA,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,aAAa,GAAG,UAAUC,KAAK,EAAEC,KAAK,EAAE;EAC5C;EACA,MAAMC,KAAK,GAAG;IAAED,KAAK;IAAEd;EAAQ,CAAC;EAChC,IAAI;IAAEgB,GAAG;IAAEC;EAAO,CAAC,GAAGjB,OAAO,CAACU,GAAG,CAACE,aAAa,CAACC,KAAK,EAAEE,KAAK,CAAC;EAC7D;EACAG,MAAM,CAACC,MAAM,CAACL,KAAK,CAACM,GAAG,CAACC,OAAO,EAAEL,GAAG,CAAC;EACrCE,MAAM,CAACC,MAAM,CAACL,KAAK,CAACM,GAAG,CAACE,WAAW,EAAEL,MAAM,CAAC;EAC5C,OAAOH,KAAK;AACd,CAAC;;AAED;AACA,MAAMS,eAAe,GAAG,UAAUV,KAAK,EAAEC,KAAK,EAAE;EAC9CI,MAAM,CAACM,IAAI,CAACX,KAAK,CAAC,CAACY,OAAO,CAACC,CAAC,IAAI;IAC9B,IAAIb,KAAK,CAACa,CAAC,CAAC,KAAK,aAAa,EAAE;MAC9BZ,KAAK,CAACJ,GAAG,CAACiB,WAAW,CAACD,CAAC,CAAC,GAAG,IAAI;MAC/Bb,KAAK,CAACa,CAAC,CAAC,GAAG,aAAa;IAC1B;EACF,CAAC,CAAC;EACF,OAAOZ,KAAK;AACd,CAAC;AAED,MAAMc,UAAU,GAAG,UAAUC,GAAG,EAAEhB,KAAK,EAAEiB,SAAS,EAAE;EAClD,IAAIC,GAAG,GAAG3B,SAAS,CAACyB,GAAG,EAAEpB,QAAQ,CAAC;EAClCI,KAAK,CAACkB,GAAG,CAACC,SAAS,CAAC,GAAGnB,KAAK,CAACkB,GAAG,CAACC,SAAS,CAAC,IAAI,WAAW;EAC1DnB,KAAK,CAACkB,GAAG,CAACE,MAAM,CAAC,GAAGpB,KAAK,CAACkB,GAAG,CAACE,MAAM,CAAC,IAAI,QAAQ;EACjD,IAAIH,SAAS,KAAK,IAAI,EAAE;IACtB;IACAjB,KAAK,CAACkB,GAAG,CAACG,YAAY,CAAC,GAAGrB,KAAK,CAACkB,GAAG,CAACG,YAAY,CAAC,IAAI,cAAc;EACrE;AACF,CAAC;AAED,MAAMC,eAAe,GAAG,UAAUN,GAAG,EAAEhB,KAAK,EAAEC,KAAK,EAAE;EACnD,IAAIsB,GAAG,GAAG/B,aAAa,CAACwB,GAAG,EAAEf,KAAK,CAAC;EACnCD,KAAK,CAACuB,GAAG,CAAC,GAAGvB,KAAK,CAACuB,GAAG,CAAC,IAAI,aAAa;EACxC,IAAIC,IAAI,GAAG/B,aAAa,CAACuB,GAAG,EAAEf,KAAK,CAAC;EACpCD,KAAK,CAACwB,IAAI,CAAC,GAAGxB,KAAK,CAACwB,IAAI,CAAC,IAAI,aAAa;AAC5C,CAAC;AAED,MAAMC,UAAU,GAAG,UAAUT,GAAG,EAAEhB,KAAK,EAAEC,KAAK,EAAE;EAC9C,IAAIyB,IAAI,GAAGpC,QAAQ,CAAC0B,GAAG,EAAEf,KAAK,CAAC;EAC/BD,KAAK,CAAC0B,IAAI,CAAC,GAAG1B,KAAK,CAAC0B,IAAI,CAAC,IAAI,QAAQ;AACvC,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG,UAAUC,WAAW,EAAE3B,KAAK,EAAE;EACnD,IAAID,KAAK,GAAG,CAAC,CAAC;EACd,MAAMG,GAAG,GAAGF,KAAK,CAACM,GAAG,CAACC,OAAO;EAC7B;EACAH,MAAM,CAACM,IAAI,CAACiB,WAAW,CAAC,CAAChB,OAAO,CAACiB,CAAC,IAAI;IACpC,MAAMC,IAAI,GAAGF,WAAW,CAACC,CAAC,CAAC;IAC3B7B,KAAK,CAAC6B,CAAC,CAAC,GAAG/B,cAAc,CAACgC,IAAI,CAAC;IAC/B;IACA,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,aAAa,EAAE;MAClDf,UAAU,CAACc,CAAC,EAAE1B,GAAG,EAAE,KAAK,CAAC;IAC3B;IACA,IAAI2B,IAAI,KAAK,aAAa,EAAE;MAC1Bf,UAAU,CAACc,CAAC,EAAE1B,GAAG,EAAE,IAAI,CAAC;MACxBmB,eAAe,CAACO,CAAC,EAAE1B,GAAG,EAAEF,KAAK,CAAC;IAChC;IACA;IACA,IAAI6B,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,aAAa,EAAE;MACnD,IAAIC,GAAG,GAAGrC,YAAY,CAACmC,CAAC,EAAEjC,QAAQ,EAAE,QAAQ,CAAC;MAC7C,IAAI,CAACO,GAAG,CAAC4B,GAAG,CAAC,EAAE;QACb/B,KAAK,CAAC+B,GAAG,CAAC,GAAG,YAAY,EAAC;MAC5B;IACF;IACA;IACA,IAAID,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,aAAa,EAAE;MAC3EL,UAAU,CAACI,CAAC,EAAE1B,GAAG,EAAEF,KAAK,CAAC;IAC3B;IACA,IAAI6B,IAAI,KAAK,UAAU,EAAE;MACvB,IAAIC,GAAG,GAAGrC,YAAY,CAACmC,CAAC,EAAEjC,QAAQ,EAAE,WAAW,CAAC;MAChD,IAAI,CAACO,GAAG,CAAC4B,GAAG,CAAC,EAAE;QACb/B,KAAK,CAAC+B,GAAG,CAAC,GAAG,YAAY,EAAC;MAC5B;IACF;EACF,CAAC,CAAC;EACF;EACA9B,KAAK,GAAGF,aAAa,CAACC,KAAK,EAAEC,KAAK,CAAC;EACnC,OAAOA,KAAK;AACd,CAAC;AAED,MAAM+B,MAAM,GAAG,UAAU/B,KAAK,EAAE;EAC9BA,KAAK,GAAGF,aAAa,CAACE,KAAK,CAACM,GAAG,CAACC,OAAO,EAAEP,KAAK,CAAC;EAC/CA,KAAK,GAAGS,eAAe,CAACT,KAAK,CAACM,GAAG,CAACC,OAAO,EAAEP,KAAK,CAAC;EACjDA,KAAK,GAAG0B,cAAc,CAAC1B,KAAK,CAACJ,GAAG,CAACoC,QAAQ,EAAEhC,KAAK,CAAC;EACjDA,KAAK,GAAGZ,YAAY,CAACY,KAAK,CAAC;EAC3BA,KAAK,GAAGb,gBAAgB,CAACa,KAAK,CAAC;EAC/B,OAAOA,KAAK;AACd,CAAC;AACD,eAAe+B,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}