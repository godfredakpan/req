{"ast":null,"code":"var _jsxFileName = \"/Users/godfredakpan/Documents/projects/AgentReg/src/components/all_users.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport getAllUsers from '../fauna/getUsers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  dataField: 'firstName',\n  text: 'First Name'\n}, {\n  dataField: 'middleName',\n  text: 'Middle Name'\n}, {\n  dataField: 'lastName',\n  text: 'Last Name'\n}, {\n  dataField: 'gender',\n  text: 'Gender'\n}, {\n  dataField: 'dob',\n  text: 'Date of Birth'\n}, {\n  dataField: 'email',\n  text: 'Email'\n}, {\n  dataField: 'phone',\n  text: 'Phone'\n}, {\n  dataField: 'address',\n  text: 'Address'\n}, {\n  dataField: 'bankName',\n  text: 'Bank Name'\n}, {\n  dataField: 'accountNumber',\n  text: 'Acct Number'\n}, {\n  dataField: 'accountName',\n  text: 'Account Name'\n}];\nconst options = {\n  sizePerPage: 10,\n  hideSizePerPage: true,\n  hidePageListOnlyOnePage: true\n};\nfunction Users() {\n  _s();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [users, setUsers] = useState([]);\n  React.useEffect(() => {\n    async function fetchData() {\n      const users = await getAllUsers();\n      console.log(users);\n      setUsers(users);\n    }\n    fetchData();\n  }, []);\n  const handleSelect = (row, isSelected) => {\n    if (isSelected) {\n      setSelectedRows([...selectedRows, row]);\n    } else {\n      setSelectedRows(selectedRows.filter(r => r.id !== row.id));\n    }\n  };\n  console.log(users);\n  const handleExportClick = () => {\n    const selectedData = selectedRows.length > 0 ? selectedRows : users;\n    const sheetData = [['First Name', 'Middle Name', 'Last Name', 'Gender', 'Date of Birth', 'Email', 'Phone', 'Address', 'Bank Name', 'Account Number', 'Account Name'], ...selectedData.map(d => [d.firstName, d.middleName, d.lastName, d.gender, d.dob, d.email, d.phone, d.address, d.bankName, d.accountNumber, d.accountName])];\n    const sheetName = 'Purple Data';\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    saveAs(new Blob([excelBuffer], {\n      type: 'application/octet-stream'\n    }), `${sheetName}.xlsx`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5 card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row card-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Table Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n          keyField: \"id\",\n          data: users,\n          columns: columns,\n          selectRow: {\n            mode: 'checkbox',\n            onSelect: handleSelect\n          },\n          pagination: paginationFactory(options),\n          wrapperClasses: \"table-responsive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleExportClick,\n          children: \"Export to Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Users, \"bHa78TjZFeey2Sz6TMx0BEQ5bc0=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","BootstrapTable","paginationFactory","Button","saveAs","XLSX","getAllUsers","columns","dataField","text","options","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","Users","selectedRows","setSelectedRows","users","setUsers","useEffect","fetchData","console","log","handleSelect","row","isSelected","filter","r","id","handleExportClick","selectedData","length","sheetData","map","d","firstName","middleName","lastName","gender","dob","email","phone","address","bankName","accountNumber","accountName","sheetName","workbook","utils","book_new","worksheet","aoa_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","Blob","mode","onSelect"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/src/components/all_users.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Button } from 'react-bootstrap';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport getAllUsers from '../fauna/getUsers';\n\nconst columns = [\n  {\n    dataField: 'firstName',\n    text: 'First Name',\n  },\n  {\n    dataField: 'middleName',\n    text: 'Middle Name',\n  },\n  {\n    dataField: 'lastName',\n    text: 'Last Name',\n  },\n  {\n    dataField: 'gender',\n    text: 'Gender',\n  },\n  {\n    dataField: 'dob',\n    text: 'Date of Birth',\n  },\n  {\n    dataField: 'email',\n    text: 'Email',\n  },\n  {\n    dataField: 'phone',\n    text: 'Phone',\n  },\n  {\n    dataField: 'address',\n    text: 'Address',\n  },\n  {\n    dataField: 'bankName',\n    text: 'Bank Name',\n  },\n  {\n    dataField: 'accountNumber',\n    text: 'Acct Number',\n  },\n  {\n    dataField: 'accountName',\n    text: 'Account Name',\n  },\n\n];\n\n\nconst options = {\n  sizePerPage: 10,\n  hideSizePerPage: true,\n  hidePageListOnlyOnePage: true,\n};\n\nfunction Users() {\n  const [selectedRows, setSelectedRows] = useState([]); \n  const [users, setUsers] = useState([]);\n\n  React.useEffect(() => {\n    async function fetchData() {\n        const users = await getAllUsers();\n        console.log(users);\n        setUsers(users);\n    }\n    fetchData();\n}, [])\n\n  const handleSelect = (row, isSelected) => {\n    if (isSelected) {\n      setSelectedRows([...selectedRows, row]);\n    } else {\n      setSelectedRows(selectedRows.filter((r) => r.id !== row.id));\n    }\n  };\n\n  console.log(users);\n\n  const handleExportClick = () => {\n    const selectedData = selectedRows.length > 0 ? selectedRows : users;\n\n    const sheetData = [\n      ['First Name', 'Middle Name', 'Last Name', 'Gender', 'Date of Birth', 'Email', 'Phone', 'Address', 'Bank Name', 'Account Number', 'Account Name'],\n      ...selectedData.map((d) => [d.firstName, d.middleName, d.lastName, d.gender, d.dob, d.email, d.phone, d.address, d.bankName, d.accountNumber, d.accountName]),\n    ];\n\n    const sheetName = 'Purple Data';\n\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array',\n    });\n\n    saveAs(\n      new Blob([excelBuffer], { type: 'application/octet-stream' }),\n      `${sheetName}.xlsx`\n    );\n  };\n\n  return (\n    <div className=\"container mt-5 card\">\n      <div className=\"row card-body\">\n        <div className=\"col-md-12\">\n          <h2>Table Data</h2>\n          <BootstrapTable\n            keyField=\"id\"\n            data={users}\n            columns={columns}\n            selectRow={{ mode: 'checkbox', onSelect: handleSelect }}\n            pagination={paginationFactory(options)}\n            wrapperClasses=\"table-responsive\"\n          />\n          <Button onClick={handleExportClick}>Export to Excel</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}