{"ast":null,"code":"import allPrefixes from './allPrefixes.js';\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\nconst defaults = {\n  safe: true,\n  min: 3\n};\nconst prepare = function () {\n  let words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let model = this.model();\n  opts = Object.assign({}, defaults, opts);\n  if (isObject(words)) {\n    Object.assign(model.one.lexicon, words);\n    words = Object.keys(words);\n  }\n  let prefixes = allPrefixes(words, opts, this.world());\n  // manually combine these with any existing prefixes\n  Object.keys(prefixes).forEach(str => {\n    // explode any overlaps\n    if (model.one.typeahead.hasOwnProperty(str)) {\n      delete model.one.typeahead[str];\n      return;\n    }\n    model.one.typeahead[str] = prefixes[str];\n  });\n  return this;\n};\nexport default {\n  typeahead: prepare\n};","map":{"version":3,"names":["allPrefixes","isObject","val","Object","prototype","toString","call","defaults","safe","min","prepare","words","opts","model","assign","one","lexicon","keys","prefixes","world","forEach","str","typeahead","hasOwnProperty"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/1-one/typeahead/lib/index.js"],"sourcesContent":["import allPrefixes from './allPrefixes.js'\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nconst defaults = {\n  safe: true,\n  min: 3,\n}\n\nconst prepare = function (words = [], opts = {}) {\n  let model = this.model()\n  opts = Object.assign({}, defaults, opts)\n  if (isObject(words)) {\n    Object.assign(model.one.lexicon, words)\n    words = Object.keys(words)\n  }\n  let prefixes = allPrefixes(words, opts, this.world())\n  // manually combine these with any existing prefixes\n  Object.keys(prefixes).forEach(str => {\n    // explode any overlaps\n    if (model.one.typeahead.hasOwnProperty(str)) {\n      delete model.one.typeahead[str]\n      return\n    }\n    model.one.typeahead[str] = prefixes[str]\n  })\n  return this\n}\n\nexport default {\n  typeahead: prepare\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAE1C,MAAMC,QAAQ,GAAGC,GAAG,IAAI;EACtB,OAAOC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,GAAG,CAAC,KAAK,iBAAiB;AAClE,CAAC;AAED,MAAMK,QAAQ,GAAG;EACfC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,OAAO,GAAG,YAAiC;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,IAAI,uEAAG,CAAC,CAAC;EAC7C,IAAIC,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;EACxBD,IAAI,GAAGT,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC,EAAEP,QAAQ,EAAEK,IAAI,CAAC;EACxC,IAAIX,QAAQ,CAACU,KAAK,CAAC,EAAE;IACnBR,MAAM,CAACW,MAAM,CAACD,KAAK,CAACE,GAAG,CAACC,OAAO,EAAEL,KAAK,CAAC;IACvCA,KAAK,GAAGR,MAAM,CAACc,IAAI,CAACN,KAAK,CAAC;EAC5B;EACA,IAAIO,QAAQ,GAAGlB,WAAW,CAACW,KAAK,EAAEC,IAAI,EAAE,IAAI,CAACO,KAAK,EAAE,CAAC;EACrD;EACAhB,MAAM,CAACc,IAAI,CAACC,QAAQ,CAAC,CAACE,OAAO,CAACC,GAAG,IAAI;IACnC;IACA,IAAIR,KAAK,CAACE,GAAG,CAACO,SAAS,CAACC,cAAc,CAACF,GAAG,CAAC,EAAE;MAC3C,OAAOR,KAAK,CAACE,GAAG,CAACO,SAAS,CAACD,GAAG,CAAC;MAC/B;IACF;IACAR,KAAK,CAACE,GAAG,CAACO,SAAS,CAACD,GAAG,CAAC,GAAGH,QAAQ,CAACG,GAAG,CAAC;EAC1C,CAAC,CAAC;EACF,OAAO,IAAI;AACb,CAAC;AAED,eAAe;EACbC,SAAS,EAAEZ;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}