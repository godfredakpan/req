{"ast":null,"code":"const getWords = function (model, left, right) {\n  return Object.entries(model.exceptions).reduce((h, a) => {\n    if (left) {\n      h[a[0]] = left;\n    }\n    h[a[1]] = right;\n    return h;\n  }, {});\n};\nconst expandModels = function (model) {\n  let {\n    lexicon\n  } = model.one;\n  const {\n    toPast,\n    toPresent,\n    toGerund,\n    toSuperlative,\n    toComparative\n  } = model.two.models;\n  let res = {};\n  let words = {};\n  // past-tense\n  words = getWords(toPast, 'Infinitive', 'PastTense');\n  Object.assign(res, words);\n  // present-tense\n  words = getWords(toPresent, 'Infinitive', 'Verb');\n  Object.assign(res, words);\n  // gerund-form\n  words = getWords(toGerund, 'Infinitive', 'Gerund');\n  Object.assign(res, words);\n  // superlative\n  words = getWords(toSuperlative, 'Adjective', 'Superlative');\n  Object.assign(res, words);\n  // comparative\n  words = getWords(toComparative, 'Adjective', 'Comparative');\n  Object.assign(res, words);\n  model.one.lexicon = Object.assign(res, lexicon);\n  return model;\n};\nexport default expandModels;","map":{"version":3,"names":["getWords","model","left","right","Object","entries","exceptions","reduce","h","a","expandModels","lexicon","one","toPast","toPresent","toGerund","toSuperlative","toComparative","two","models","res","words","assign"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/2-two/preTagger/model/_expand/models.js"],"sourcesContent":["\nconst getWords = function (model, left, right) {\n  return Object.entries(model.exceptions).reduce((h, a) => {\n    if (left) {\n      h[a[0]] = left\n    }\n    h[a[1]] = right\n    return h\n  }, {})\n}\n\n\nconst expandModels = function (model) {\n  let { lexicon } = model.one\n  const { toPast, toPresent, toGerund, toSuperlative, toComparative } = model.two.models\n  let res = {}\n  let words = {}\n  // past-tense\n  words = getWords(toPast, 'Infinitive', 'PastTense')\n  Object.assign(res, words)\n  // present-tense\n  words = getWords(toPresent, 'Infinitive', 'Verb')\n  Object.assign(res, words)\n  // gerund-form\n  words = getWords(toGerund, 'Infinitive', 'Gerund')\n  Object.assign(res, words)\n  // superlative\n  words = getWords(toSuperlative, 'Adjective', 'Superlative')\n  Object.assign(res, words)\n  // comparative\n  words = getWords(toComparative, 'Adjective', 'Comparative')\n  Object.assign(res, words)\n\n  model.one.lexicon = Object.assign(res, lexicon)\n\n  return model\n}\nexport default expandModels"],"mappings":"AACA,MAAMA,QAAQ,GAAG,UAAUC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC7C,OAAOC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAACK,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACvD,IAAIP,IAAI,EAAE;MACRM,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGP,IAAI;IAChB;IACAM,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGN,KAAK;IACf,OAAOK,CAAC;EACV,CAAC,EAAE,CAAC,CAAC,CAAC;AACR,CAAC;AAGD,MAAME,YAAY,GAAG,UAAUT,KAAK,EAAE;EACpC,IAAI;IAAEU;EAAQ,CAAC,GAAGV,KAAK,CAACW,GAAG;EAC3B,MAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAc,CAAC,GAAGhB,KAAK,CAACiB,GAAG,CAACC,MAAM;EACtF,IAAIC,GAAG,GAAG,CAAC,CAAC;EACZ,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd;EACAA,KAAK,GAAGrB,QAAQ,CAACa,MAAM,EAAE,YAAY,EAAE,WAAW,CAAC;EACnDT,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;EACzB;EACAA,KAAK,GAAGrB,QAAQ,CAACc,SAAS,EAAE,YAAY,EAAE,MAAM,CAAC;EACjDV,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;EACzB;EACAA,KAAK,GAAGrB,QAAQ,CAACe,QAAQ,EAAE,YAAY,EAAE,QAAQ,CAAC;EAClDX,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;EACzB;EACAA,KAAK,GAAGrB,QAAQ,CAACgB,aAAa,EAAE,WAAW,EAAE,aAAa,CAAC;EAC3DZ,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;EACzB;EACAA,KAAK,GAAGrB,QAAQ,CAACiB,aAAa,EAAE,WAAW,EAAE,aAAa,CAAC;EAC3Db,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;EAEzBpB,KAAK,CAACW,GAAG,CAACD,OAAO,GAAGP,MAAM,CAACkB,MAAM,CAACF,GAAG,EAAET,OAAO,CAAC;EAE/C,OAAOV,KAAK;AACd,CAAC;AACD,eAAeS,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}