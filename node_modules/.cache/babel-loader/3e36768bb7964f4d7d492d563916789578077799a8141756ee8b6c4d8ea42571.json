{"ast":null,"code":"import find from '../find.js';\nimport toJSON from './toJSON.js';\nimport parseVerb from './parse/index.js';\nimport toInfinitive from './conjugate/toInfinitive.js';\nimport toPast from './conjugate/toPast.js';\nimport toPresent from './conjugate/toPresent.js';\nimport toFuture from './conjugate/toFuture.js';\nimport toGerund from './conjugate/toGerund.js';\nimport getSubject from './parse/getSubject.js';\nimport getGrammar from './parse/grammar/index.js';\nimport toNegative from './conjugate/toNegative.js';\nconst api = function (View) {\n  class Verbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Verbs';\n    }\n    parse(n) {\n      return this.getNth(n).map(parseVerb);\n    }\n    json(opts, n) {\n      let m = this.getNth(n);\n      let arr = m.map(vb => {\n        let json = vb.toView().json(opts)[0] || {};\n        json.verb = toJSON(vb);\n        return json;\n      }, []);\n      return arr;\n    }\n    subjects(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        return getSubject(vb, parsed).subject;\n      });\n    }\n    adverbs(n) {\n      return this.getNth(n).map(vb => vb.match('#Adverb'));\n    }\n    isSingular(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural !== true;\n      });\n    }\n    isPlural(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural === true;\n      });\n    }\n    isImperative(n) {\n      return this.getNth(n).filter(vb => vb.has('#Imperative'));\n    }\n    toInfinitive(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toInfinitive(vb, parsed, info.form);\n      });\n    }\n    toPresentTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toPresent(vb, parsed, info.form);\n      });\n    }\n    toPastTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toPast(vb, parsed, info.form);\n      });\n    }\n    toFutureTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toFuture(vb, parsed, info.form);\n      });\n    }\n    toGerund(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toGerund(vb, parsed, info.form);\n      });\n    }\n    conjugate(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        // allow imperatives like 'go!' to be conjugated here (only)\n        if (info.form === 'imperative') {\n          info.form = 'simple-present';\n        }\n        return {\n          Infinitive: toInfinitive(vb.clone(), parsed, info.form).text('normal'),\n          PastTense: toPast(vb.clone(), parsed, info.form).text('normal'),\n          PresentTense: toPresent(vb.clone(), parsed, info.form).text('normal'),\n          FutureTense: toFuture(vb.clone(), parsed, info.form).text('normal')\n        };\n      }, []);\n    }\n\n    /** return only verbs with 'not'*/\n    isNegative() {\n      return this.if('#Negative');\n    }\n    /**  return only verbs without 'not'*/\n    isPositive() {\n      return this.ifNo('#Negative');\n    }\n    /** remove 'not' from these verbs */\n    toPositive() {\n      let m = this.match('do not #Verb');\n      if (m.found) {\n        m.remove('do not');\n      }\n      return this.remove('#Negative');\n    }\n    toNegative(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb);\n        let info = getGrammar(vb, parsed);\n        return toNegative(vb, parsed, info.form);\n      });\n    }\n    // overloaded - keep Verb class\n    update(pointer) {\n      let m = new Verbs(this.document, pointer);\n      m._cache = this._cache; // share this full thing\n      return m;\n    }\n  }\n  Verbs.prototype.toPast = Verbs.prototype.toPastTense;\n  Verbs.prototype.toPresent = Verbs.prototype.toPresentTense;\n  Verbs.prototype.toFuture = Verbs.prototype.toFutureTense;\n  View.prototype.verbs = function (n) {\n    let vb = find(this);\n    vb = vb.getNth(n);\n    return new Verbs(this.document, vb.pointer);\n  };\n};\nexport default api;","map":{"version":3,"names":["find","toJSON","parseVerb","toInfinitive","toPast","toPresent","toFuture","toGerund","getSubject","getGrammar","toNegative","api","View","Verbs","constructor","document","pointer","groups","viewType","parse","n","getNth","map","json","opts","m","arr","vb","toView","verb","subjects","parsed","subject","adverbs","match","isSingular","filter","plural","isPlural","isImperative","has","info","form","toPresentTense","toPastTense","toFutureTense","conjugate","Infinitive","clone","text","PastTense","PresentTense","FutureTense","isNegative","if","isPositive","ifNo","toPositive","found","remove","update","_cache","prototype","verbs"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/3-three/verbs/api/api.js"],"sourcesContent":["import find from '../find.js'\nimport toJSON from './toJSON.js'\nimport parseVerb from './parse/index.js'\nimport toInfinitive from './conjugate/toInfinitive.js'\nimport toPast from './conjugate/toPast.js'\nimport toPresent from './conjugate/toPresent.js'\nimport toFuture from './conjugate/toFuture.js'\nimport toGerund from './conjugate/toGerund.js'\nimport getSubject from './parse/getSubject.js'\nimport getGrammar from './parse/grammar/index.js'\nimport toNegative from './conjugate/toNegative.js'\n\n\nconst api = function (View) {\n  class Verbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Verbs'\n    }\n    parse(n) {\n      return this.getNth(n).map(parseVerb)\n    }\n    json(opts, n) {\n      let m = this.getNth(n)\n      let arr = m.map(vb => {\n        let json = vb.toView().json(opts)[0] || {}\n        json.verb = toJSON(vb)\n        return json\n      }, [])\n      return arr\n    }\n    subjects(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        return getSubject(vb, parsed).subject\n      })\n    }\n    adverbs(n) {\n      return this.getNth(n).map(vb => vb.match('#Adverb'))\n    }\n    isSingular(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural !== true\n      })\n    }\n    isPlural(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural === true\n      })\n    }\n    isImperative(n) {\n      return this.getNth(n).filter(vb => vb.has('#Imperative'))\n    }\n    toInfinitive(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toInfinitive(vb, parsed, info.form)\n      })\n    }\n    toPresentTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toPresent(vb, parsed, info.form)\n      })\n    }\n    toPastTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toPast(vb, parsed, info.form)\n      })\n    }\n    toFutureTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toFuture(vb, parsed, info.form)\n      })\n    }\n    toGerund(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toGerund(vb, parsed, info.form)\n      })\n    }\n    conjugate(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        // allow imperatives like 'go!' to be conjugated here (only)\n        if (info.form === 'imperative') {\n          info.form = 'simple-present'\n        }\n        return {\n          Infinitive: toInfinitive(vb.clone(), parsed, info.form).text('normal'),\n          PastTense: toPast(vb.clone(), parsed, info.form).text('normal'),\n          PresentTense: toPresent(vb.clone(), parsed, info.form).text('normal'),\n          FutureTense: toFuture(vb.clone(), parsed, info.form).text('normal'),\n        }\n      }, [])\n    }\n\n    /** return only verbs with 'not'*/\n    isNegative() {\n      return this.if('#Negative')\n    }\n    /**  return only verbs without 'not'*/\n    isPositive() {\n      return this.ifNo('#Negative')\n    }\n    /** remove 'not' from these verbs */\n    toPositive() {\n      let m = this.match('do not #Verb')\n      if (m.found) {\n        m.remove('do not')\n      }\n      return this.remove('#Negative')\n    }\n    toNegative(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toNegative(vb, parsed, info.form)\n      })\n    }\n    // overloaded - keep Verb class\n    update(pointer) {\n      let m = new Verbs(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  Verbs.prototype.toPast = Verbs.prototype.toPastTense\n  Verbs.prototype.toPresent = Verbs.prototype.toPresentTense\n  Verbs.prototype.toFuture = Verbs.prototype.toFutureTense\n\n  View.prototype.verbs = function (n) {\n    let vb = find(this)\n    vb = vb.getNth(n)\n    return new Verbs(this.document, vb.pointer)\n  }\n}\nexport default api\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}