{"ast":null,"code":"import { getTense, isAreAm } from '../lib.js';\nconst keep = {\n  tags: true\n};\n\n// all verb forms are the same\nconst toGerund = function (vb, parsed) {\n  // console.log(form)\n  const {\n    toInfinitive,\n    conjugate\n  } = vb.methods.two.transform.verb;\n  const {\n    root,\n    auxiliary\n  } = parsed;\n  if (vb.has('#Gerund')) {\n    return vb;\n  }\n\n  // conjugate '-ing' verb\n  let str = root.text('normal');\n  str = toInfinitive(str, vb.model, getTense(root));\n  let gerund = conjugate(str, vb.model).Gerund;\n  // 'are walking', 'is walking'\n  if (gerund) {\n    gerund = `${isAreAm(vb, parsed)} ${gerund}`;\n    vb.replace(root, gerund, keep);\n  }\n\n  // remove any existing auxiliary\n  if (auxiliary.found) {\n    vb.remove(auxiliary);\n  }\n  vb.replace('not is', 'is not');\n  vb.replace('not are', 'are not');\n  vb.fullSentence().compute(['tagger', 'chunks']);\n  return vb;\n};\nexport default toGerund;","map":{"version":3,"names":["getTense","isAreAm","keep","tags","toGerund","vb","parsed","toInfinitive","conjugate","methods","two","transform","verb","root","auxiliary","has","str","text","model","gerund","Gerund","replace","found","remove","fullSentence","compute"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/3-three/verbs/api/conjugate/toGerund.js"],"sourcesContent":["import { getTense, isAreAm } from '../lib.js'\nconst keep = { tags: true }\n\n// all verb forms are the same\nconst toGerund = function (vb, parsed) {\n  // console.log(form)\n  const { toInfinitive, conjugate } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  if (vb.has('#Gerund')) {\n    return vb\n  }\n\n  // conjugate '-ing' verb\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  let gerund = conjugate(str, vb.model).Gerund\n  // 'are walking', 'is walking'\n  if (gerund) {\n    gerund = `${isAreAm(vb, parsed)} ${gerund}`\n    vb.replace(root, gerund, keep)\n  }\n\n  // remove any existing auxiliary\n  if (auxiliary.found) {\n    vb.remove(auxiliary)\n  }\n  vb.replace('not is', 'is not')\n  vb.replace('not are', 'are not')\n  vb.fullSentence().compute(['tagger', 'chunks'])\n  return vb\n}\nexport default toGerund\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,WAAW;AAC7C,MAAMC,IAAI,GAAG;EAAEC,IAAI,EAAE;AAAK,CAAC;;AAE3B;AACA,MAAMC,QAAQ,GAAG,UAAUC,EAAE,EAAEC,MAAM,EAAE;EACrC;EACA,MAAM;IAAEC,YAAY;IAAEC;EAAU,CAAC,GAAGH,EAAE,CAACI,OAAO,CAACC,GAAG,CAACC,SAAS,CAACC,IAAI;EACjE,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGR,MAAM;EAClC,IAAID,EAAE,CAACU,GAAG,CAAC,SAAS,CAAC,EAAE;IACrB,OAAOV,EAAE;EACX;;EAEA;EACA,IAAIW,GAAG,GAAGH,IAAI,CAACI,IAAI,CAAC,QAAQ,CAAC;EAC7BD,GAAG,GAAGT,YAAY,CAACS,GAAG,EAAEX,EAAE,CAACa,KAAK,EAAElB,QAAQ,CAACa,IAAI,CAAC,CAAC;EACjD,IAAIM,MAAM,GAAGX,SAAS,CAACQ,GAAG,EAAEX,EAAE,CAACa,KAAK,CAAC,CAACE,MAAM;EAC5C;EACA,IAAID,MAAM,EAAE;IACVA,MAAM,GAAI,GAAElB,OAAO,CAACI,EAAE,EAAEC,MAAM,CAAE,IAAGa,MAAO,EAAC;IAC3Cd,EAAE,CAACgB,OAAO,CAACR,IAAI,EAAEM,MAAM,EAAEjB,IAAI,CAAC;EAChC;;EAEA;EACA,IAAIY,SAAS,CAACQ,KAAK,EAAE;IACnBjB,EAAE,CAACkB,MAAM,CAACT,SAAS,CAAC;EACtB;EACAT,EAAE,CAACgB,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;EAC9BhB,EAAE,CAACgB,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC;EAChChB,EAAE,CAACmB,YAAY,EAAE,CAACC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;EAC/C,OAAOpB,EAAE;AACX,CAAC;AACD,eAAeD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}