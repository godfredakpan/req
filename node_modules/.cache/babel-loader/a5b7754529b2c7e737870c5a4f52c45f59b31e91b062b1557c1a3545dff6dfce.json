{"ast":null,"code":"// these methods are called with '@hasComma' in the match syntax\n// various unicode quotation-mark formats\nconst startQuote = /([\\u0022\\uFF02\\u0027\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F])/;\nconst endQuote = /([\\u0022\\uFF02\\u0027\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4])/;\nconst hasHyphen = /^[-–—]$/;\nconst hasDash = / [-–—]{1,3} /;\n\n/** search the term's 'post' punctuation  */\nconst hasPost = (term, punct) => term.post.indexOf(punct) !== -1;\n/** search the term's 'pre' punctuation  */\nconst hasPre = (term, punct) => term.pre.indexOf(punct) !== -1;\nconst methods = {\n  /** does it have a quotation symbol?  */\n  hasQuote: term => startQuote.test(term.pre) || endQuote.test(term.post),\n  /** does it have a comma?  */\n  hasComma: term => hasPost(term, ','),\n  /** does it end in a period? */\n  hasPeriod: term => hasPost(term, '.') === true && hasPost(term, '...') === false,\n  /** does it end in an exclamation */\n  hasExclamation: term => hasPost(term, '!'),\n  /** does it end with a question mark? */\n  hasQuestionMark: term => hasPost(term, '?') || hasPost(term, '¿'),\n  /** is there a ... at the end? */\n  hasEllipses: term => hasPost(term, '..') || hasPost(term, '…') || hasPre(term, '..') || hasPre(term, '…'),\n  /** is there a semicolon after term word? */\n  hasSemicolon: term => hasPost(term, ';'),\n  /** is there a colon after term word? */\n  hasColon: term => hasPost(term, ':'),\n  /** is there a slash '/' in term word? */\n  hasSlash: term => /\\//.test(term.text),\n  /** a hyphen connects two words like-term */\n  hasHyphen: term => hasHyphen.test(term.post) || hasHyphen.test(term.pre),\n  /** a dash separates words - like that */\n  hasDash: term => hasDash.test(term.post) || hasDash.test(term.pre),\n  /** is it multiple words combinded */\n  hasContraction: term => Boolean(term.implicit),\n  /** is it an acronym */\n  isAcronym: term => term.tags.has('Acronym'),\n  /** does it have any tags */\n  isKnown: term => term.tags.size > 0,\n  /** uppercase first letter, then a lowercase */\n  isTitleCase: term => /^\\p{Lu}[a-z'\\u00C0-\\u00FF]/u.test(term.text),\n  /** uppercase all letters */\n  isUpperCase: term => /^\\p{Lu}+$/u.test(term.text)\n};\n// aliases\nmethods.hasQuotation = methods.hasQuote;\nexport default methods;","map":{"version":3,"names":["startQuote","endQuote","hasHyphen","hasDash","hasPost","term","punct","post","indexOf","hasPre","pre","methods","hasQuote","test","hasComma","hasPeriod","hasExclamation","hasQuestionMark","hasEllipses","hasSemicolon","hasColon","hasSlash","text","hasContraction","Boolean","implicit","isAcronym","tags","has","isKnown","size","isTitleCase","isUpperCase","hasQuotation"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/1-one/match/methods/termMethods.js"],"sourcesContent":["// these methods are called with '@hasComma' in the match syntax\n// various unicode quotation-mark formats\nconst startQuote =\n  /([\\u0022\\uFF02\\u0027\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F])/\n\nconst endQuote = /([\\u0022\\uFF02\\u0027\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4])/\n\nconst hasHyphen = /^[-–—]$/\nconst hasDash = / [-–—]{1,3} /\n\n/** search the term's 'post' punctuation  */\nconst hasPost = (term, punct) => term.post.indexOf(punct) !== -1\n/** search the term's 'pre' punctuation  */\nconst hasPre = (term, punct) => term.pre.indexOf(punct) !== -1\n\nconst methods = {\n  /** does it have a quotation symbol?  */\n  hasQuote: term => startQuote.test(term.pre) || endQuote.test(term.post),\n  /** does it have a comma?  */\n  hasComma: term => hasPost(term, ','),\n  /** does it end in a period? */\n  hasPeriod: term => hasPost(term, '.') === true && hasPost(term, '...') === false,\n  /** does it end in an exclamation */\n  hasExclamation: term => hasPost(term, '!'),\n  /** does it end with a question mark? */\n  hasQuestionMark: term => hasPost(term, '?') || hasPost(term, '¿'),\n  /** is there a ... at the end? */\n  hasEllipses: term => hasPost(term, '..') || hasPost(term, '…') || hasPre(term, '..') || hasPre(term, '…'),\n  /** is there a semicolon after term word? */\n  hasSemicolon: term => hasPost(term, ';'),\n  /** is there a colon after term word? */\n  hasColon: term => hasPost(term, ':'),\n  /** is there a slash '/' in term word? */\n  hasSlash: term => /\\//.test(term.text),\n  /** a hyphen connects two words like-term */\n  hasHyphen: term => hasHyphen.test(term.post) || hasHyphen.test(term.pre),\n  /** a dash separates words - like that */\n  hasDash: term => hasDash.test(term.post) || hasDash.test(term.pre),\n  /** is it multiple words combinded */\n  hasContraction: term => Boolean(term.implicit),\n  /** is it an acronym */\n  isAcronym: term => term.tags.has('Acronym'),\n  /** does it have any tags */\n  isKnown: term => term.tags.size > 0,\n  /** uppercase first letter, then a lowercase */\n  isTitleCase: term => /^\\p{Lu}[a-z'\\u00C0-\\u00FF]/u.test(term.text),\n  /** uppercase all letters */\n  isUpperCase: term => /^\\p{Lu}+$/u.test(term.text),\n}\n// aliases\nmethods.hasQuotation = methods.hasQuote\n\nexport default methods\n"],"mappings":"AAAA;AACA;AACA,MAAMA,UAAU,GACd,kHAAkH;AAEpH,MAAMC,QAAQ,GAAG,8EAA8E;AAE/F,MAAMC,SAAS,GAAG,SAAS;AAC3B,MAAMC,OAAO,GAAG,cAAc;;AAE9B;AACA,MAAMC,OAAO,GAAG,CAACC,IAAI,EAAEC,KAAK,KAAKD,IAAI,CAACE,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC;AAChE;AACA,MAAMG,MAAM,GAAG,CAACJ,IAAI,EAAEC,KAAK,KAAKD,IAAI,CAACK,GAAG,CAACF,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC;AAE9D,MAAMK,OAAO,GAAG;EACd;EACAC,QAAQ,EAAEP,IAAI,IAAIL,UAAU,CAACa,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC,IAAIT,QAAQ,CAACY,IAAI,CAACR,IAAI,CAACE,IAAI,CAAC;EACvE;EACAO,QAAQ,EAAET,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;EACpC;EACAU,SAAS,EAAEV,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC,KAAK,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,KAAK,CAAC,KAAK,KAAK;EAChF;EACAW,cAAc,EAAEX,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;EAC1C;EACAY,eAAe,EAAEZ,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;EACjE;EACAa,WAAW,EAAEb,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,IAAI,CAAC,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC,IAAII,MAAM,CAACJ,IAAI,EAAE,IAAI,CAAC,IAAII,MAAM,CAACJ,IAAI,EAAE,GAAG,CAAC;EACzG;EACAc,YAAY,EAAEd,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;EACxC;EACAe,QAAQ,EAAEf,IAAI,IAAID,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;EACpC;EACAgB,QAAQ,EAAEhB,IAAI,IAAI,IAAI,CAACQ,IAAI,CAACR,IAAI,CAACiB,IAAI,CAAC;EACtC;EACApB,SAAS,EAAEG,IAAI,IAAIH,SAAS,CAACW,IAAI,CAACR,IAAI,CAACE,IAAI,CAAC,IAAIL,SAAS,CAACW,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC;EACxE;EACAP,OAAO,EAAEE,IAAI,IAAIF,OAAO,CAACU,IAAI,CAACR,IAAI,CAACE,IAAI,CAAC,IAAIJ,OAAO,CAACU,IAAI,CAACR,IAAI,CAACK,GAAG,CAAC;EAClE;EACAa,cAAc,EAAElB,IAAI,IAAImB,OAAO,CAACnB,IAAI,CAACoB,QAAQ,CAAC;EAC9C;EACAC,SAAS,EAAErB,IAAI,IAAIA,IAAI,CAACsB,IAAI,CAACC,GAAG,CAAC,SAAS,CAAC;EAC3C;EACAC,OAAO,EAAExB,IAAI,IAAIA,IAAI,CAACsB,IAAI,CAACG,IAAI,GAAG,CAAC;EACnC;EACAC,WAAW,EAAE1B,IAAI,IAAI,6BAA6B,CAACQ,IAAI,CAACR,IAAI,CAACiB,IAAI,CAAC;EAClE;EACAU,WAAW,EAAE3B,IAAI,IAAI,YAAY,CAACQ,IAAI,CAACR,IAAI,CAACiB,IAAI;AAClD,CAAC;AACD;AACAX,OAAO,CAACsB,YAAY,GAAGtB,OAAO,CAACC,QAAQ;AAEvC,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}