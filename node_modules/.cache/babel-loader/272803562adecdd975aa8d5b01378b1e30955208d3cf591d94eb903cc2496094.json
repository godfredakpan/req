{"ast":null,"code":"const max = 6;\nconst getSuffixes = function () {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let list = [];\n  for (let i = max; i >= 0; i -= 1) {\n    if (str.length - 1 <= i) {\n      continue;\n    }\n    let n = str.length - i - 1;\n    let suffix = str.substring(n, n + str.length - 1);\n    list.push(suffix);\n  }\n  return list.reverse();\n};\nconst getDiff = function (left, right, suff) {\n  suff = suff.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n  let reg = new RegExp(suff + '$');\n  let stem = left.replace(reg, '');\n  if (!right.startsWith(stem)) {\n    return;\n  }\n  stem = stem.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  let start = new RegExp('^' + stem);\n  let rest = right.replace(start, '');\n  return {\n    from: suff,\n    to: rest,\n    id: suff + '|' + rest,\n    reg\n  };\n};\nconst unique = function (arr) {\n  let set = new Set();\n  return arr.filter(a => {\n    if (set.has(a.id)) {\n      return false;\n    }\n    set.add(a.id);\n    return true;\n  });\n};\nconst getAll = function (arr) {\n  let res = [];\n  arr.forEach(a => {\n    let [left, right] = a;\n    let list = getSuffixes(left);\n    list.forEach(suff => {\n      let diff = getDiff(left, right, suff);\n      if (diff) {\n        res.push(diff);\n      }\n    });\n  });\n  res = unique(res);\n  return res;\n};\nexport default getAll;\n\n// console.log(getAll([['laughed', 'laughing']]))","map":{"version":3,"names":["max","getSuffixes","str","list","i","length","n","suffix","substring","push","reverse","getDiff","left","right","suff","replace","reg","RegExp","stem","startsWith","start","rest","from","to","id","unique","arr","set","Set","filter","a","has","add","getAll","res","forEach","diff"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/suffix-thumb/src/learn/01-generate/generate.js"],"sourcesContent":["const max = 6\n\nconst getSuffixes = function (str = '') {\n  let list = []\n  for (let i = max; i >= 0; i -= 1) {\n    if (str.length - 1 <= i) {\n      continue\n    }\n    let n = str.length - i - 1\n    let suffix = str.substring(n, n + str.length - 1)\n    list.push(suffix)\n  }\n  return list.reverse()\n}\n\nconst getDiff = function (left, right, suff) {\n  suff = suff.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n  let reg = new RegExp(suff + '$')\n  let stem = left.replace(reg, '')\n  if (!right.startsWith(stem)) {\n    return\n  }\n  stem = stem.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n  let start = new RegExp('^' + stem)\n  let rest = right.replace(start, '')\n  return { from: suff, to: rest, id: suff + '|' + rest, reg }\n}\n\nconst unique = function (arr) {\n  let set = new Set()\n  return arr.filter(a => {\n    if (set.has(a.id)) {\n      return false\n    }\n    set.add(a.id)\n    return true\n  })\n}\n\nconst getAll = function (arr) {\n  let res = []\n  arr.forEach((a) => {\n    let [left, right] = a\n    let list = getSuffixes(left)\n    list.forEach(suff => {\n      let diff = getDiff(left, right, suff)\n      if (diff) {\n        res.push(diff)\n      }\n    })\n  })\n  res = unique(res)\n  return res\n}\n\nexport default getAll\n\n\n// console.log(getAll([['laughed', 'laughing']]))"],"mappings":"AAAA,MAAMA,GAAG,GAAG,CAAC;AAEb,MAAMC,WAAW,GAAG,YAAoB;EAAA,IAAVC,GAAG,uEAAG,EAAE;EACpC,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAGJ,GAAG,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAChC,IAAIF,GAAG,CAACG,MAAM,GAAG,CAAC,IAAID,CAAC,EAAE;MACvB;IACF;IACA,IAAIE,CAAC,GAAGJ,GAAG,CAACG,MAAM,GAAGD,CAAC,GAAG,CAAC;IAC1B,IAAIG,MAAM,GAAGL,GAAG,CAACM,SAAS,CAACF,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC;IACjDF,IAAI,CAACM,IAAI,CAACF,MAAM,CAAC;EACnB;EACA,OAAOJ,IAAI,CAACO,OAAO,EAAE;AACvB,CAAC;AAED,MAAMC,OAAO,GAAG,UAAUC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC3CA,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,EAAC;EACnD,IAAIC,GAAG,GAAG,IAAIC,MAAM,CAACH,IAAI,GAAG,GAAG,CAAC;EAChC,IAAII,IAAI,GAAGN,IAAI,CAACG,OAAO,CAACC,GAAG,EAAE,EAAE,CAAC;EAChC,IAAI,CAACH,KAAK,CAACM,UAAU,CAACD,IAAI,CAAC,EAAE;IAC3B;EACF;EACAA,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;EAClD,IAAIK,KAAK,GAAG,IAAIH,MAAM,CAAC,GAAG,GAAGC,IAAI,CAAC;EAClC,IAAIG,IAAI,GAAGR,KAAK,CAACE,OAAO,CAACK,KAAK,EAAE,EAAE,CAAC;EACnC,OAAO;IAAEE,IAAI,EAAER,IAAI;IAAES,EAAE,EAAEF,IAAI;IAAEG,EAAE,EAAEV,IAAI,GAAG,GAAG,GAAGO,IAAI;IAAEL;EAAI,CAAC;AAC7D,CAAC;AAED,MAAMS,MAAM,GAAG,UAAUC,GAAG,EAAE;EAC5B,IAAIC,GAAG,GAAG,IAAIC,GAAG,EAAE;EACnB,OAAOF,GAAG,CAACG,MAAM,CAACC,CAAC,IAAI;IACrB,IAAIH,GAAG,CAACI,GAAG,CAACD,CAAC,CAACN,EAAE,CAAC,EAAE;MACjB,OAAO,KAAK;IACd;IACAG,GAAG,CAACK,GAAG,CAACF,CAAC,CAACN,EAAE,CAAC;IACb,OAAO,IAAI;EACb,CAAC,CAAC;AACJ,CAAC;AAED,MAAMS,MAAM,GAAG,UAAUP,GAAG,EAAE;EAC5B,IAAIQ,GAAG,GAAG,EAAE;EACZR,GAAG,CAACS,OAAO,CAAEL,CAAC,IAAK;IACjB,IAAI,CAAClB,IAAI,EAAEC,KAAK,CAAC,GAAGiB,CAAC;IACrB,IAAI3B,IAAI,GAAGF,WAAW,CAACW,IAAI,CAAC;IAC5BT,IAAI,CAACgC,OAAO,CAACrB,IAAI,IAAI;MACnB,IAAIsB,IAAI,GAAGzB,OAAO,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,CAAC;MACrC,IAAIsB,IAAI,EAAE;QACRF,GAAG,CAACzB,IAAI,CAAC2B,IAAI,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACFF,GAAG,GAAGT,MAAM,CAACS,GAAG,CAAC;EACjB,OAAOA,GAAG;AACZ,CAAC;AAED,eAAeD,MAAM;;AAGrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}