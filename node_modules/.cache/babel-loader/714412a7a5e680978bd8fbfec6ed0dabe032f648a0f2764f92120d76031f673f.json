{"ast":null,"code":"'use strict';\n\nvar annotate = require('fn-annotate');\nvar deprecate = require('util-deprecate');\nvar Expr = require('./Expr');\nvar errors = require('./errors');\nvar values = require('./values');\nvar objectAssign = require('object-assign');\nvar util = require('./_util');\n\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        '@ref': wrap(arguments[0])\n      });\n    case 2:\n      return new Expr({\n        ref: wrap(arguments[0]),\n        id: wrap(arguments[1])\n      });\n  }\n}\n\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name);\n  return new values.Bytes(bytes);\n}\n\n// Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name);\n  return new Expr({\n    abort: wrap(msg)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name);\n  return new Expr({\n    at: wrap(timestamp),\n    expr: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name);\n  var bindings = [];\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function (item) {\n      return wrapValues(item);\n    });\n  } else {\n    bindings = Object.keys(vars).filter(function (k) {\n      return vars[k] !== undefined;\n    }).map(function (k) {\n      var b = {};\n      b[k] = wrap(vars[k]);\n      return b;\n    });\n  }\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = [];\n      vars.forEach(function (item) {\n        Object.keys(item).forEach(function (name) {\n          expr_vars.push(Var(name));\n        });\n      });\n      expr = expr.apply(null, expr_vars);\n    } else {\n      expr = expr.apply(null, Object.keys(vars).map(function (name) {\n        return Var(name);\n      }));\n    }\n  }\n  return new Expr({\n    let: bindings,\n    in: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name);\n  return new Expr({\n    var: wrap(varName)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name);\n  return new Expr({\n    if: wrap(condition),\n    then: wrap(then),\n    else: wrap(_else)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\nfunction Do() {\n  arity.min(1, arguments, Do.name);\n  var args = argsToArray(arguments);\n  return new Expr({\n    do: wrap(args)\n  });\n}\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\nvar objectFunction = function (fields) {\n  arity.exact(1, arguments, objectFunction.name);\n  return new Expr({\n    object: wrapValues(fields)\n  });\n};\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */\nfunction Lambda() {\n  arity.between(1, 2, arguments, Lambda.name);\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0];\n      if (typeof value === 'function') {\n        return _lambdaFunc(value);\n      } else if (value instanceof Expr || util.checkInstanceHasProperty(value, '_isFaunaExpr')) {\n        return value;\n      } else {\n        throw new errors.InvalidValue('Lambda function takes either a Function or an Expr.');\n      }\n    case 2:\n      var var_name = arguments[0];\n      var expr = arguments[1];\n      return _lambdaExpr(var_name, expr);\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaFunc(func) {\n  var vars = annotate(func);\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue('Provided Function must take at least 1 argument.');\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])));\n    default:\n      return _lambdaExpr(vars, func.apply(null, vars.map(function (name) {\n        return Var(name);\n      })));\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({\n    lambda: wrap(var_name),\n    expr: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    call: wrap(ref),\n    arguments: wrap(varargs(args))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name);\n  return new Expr({\n    query: wrap(lambda)\n  });\n}\n\n// Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name);\n  return new Expr({\n    map: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name);\n  return new Expr({\n    foreach: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name);\n  return new Expr({\n    filter: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name);\n  return new Expr({\n    take: wrap(number),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name);\n  return new Expr({\n    drop: wrap(number),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name);\n  return new Expr({\n    prepend: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name);\n  return new Expr({\n    append: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name);\n  return new Expr({\n    is_empty: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name);\n  return new Expr({\n    is_nonempty: wrap(collection)\n  });\n}\n\n// Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name);\n  return new Expr({\n    is_number: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name);\n  return new Expr({\n    is_double: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name);\n  return new Expr({\n    is_integer: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name);\n  return new Expr({\n    is_boolean: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name);\n  return new Expr({\n    is_null: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name);\n  return new Expr({\n    is_bytes: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name);\n  return new Expr({\n    is_timestamp: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name);\n  return new Expr({\n    is_date: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name);\n  return new Expr({\n    is_string: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name);\n  return new Expr({\n    is_array: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name);\n  return new Expr({\n    is_object: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name);\n  return new Expr({\n    is_ref: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name);\n  return new Expr({\n    is_set: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name);\n  return new Expr({\n    is_doc: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name);\n  return new Expr({\n    is_lambda: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name);\n  return new Expr({\n    is_collection: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name);\n  return new Expr({\n    is_database: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name);\n  return new Expr({\n    is_index: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name);\n  return new Expr({\n    is_function: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name);\n  return new Expr({\n    is_key: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name);\n  return new Expr({\n    is_token: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name);\n  return new Expr({\n    is_credentials: wrap(expr)\n  });\n}\n\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name);\n  return new Expr({\n    is_role: wrap(expr)\n  });\n}\n\n// Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name);\n  ts = util.defaults(ts, null);\n  return new Expr(params({\n    get: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name);\n  return new Expr({\n    key_from_secret: wrap(secret)\n  });\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name);\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name);\n  opts = util.defaults(opts, {});\n  return new Expr(objectAssign({\n    paginate: wrap(set)\n  }, wrapValues(opts)));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name);\n  ts = util.defaults(ts, null);\n  return new Expr(params({\n    exists: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n}\n\n// Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name);\n  return new Expr({\n    create: wrap(collection_ref),\n    params: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name);\n  return new Expr({\n    update: wrap(ref),\n    params: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name);\n  return new Expr({\n    replace: wrap(ref),\n    params: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name);\n  return new Expr({\n    delete: wrap(ref)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name);\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name);\n  return new Expr({\n    remove: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name);\n  return new Expr({\n    create_class: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name);\n  return new Expr({\n    create_collection: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name);\n  return new Expr({\n    create_database: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name);\n  return new Expr({\n    create_index: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name);\n  return new Expr({\n    create_key: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name);\n  return new Expr({\n    create_function: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name);\n  return new Expr({\n    create_role: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name);\n  return new Expr({\n    create_access_provider: wrap(params)\n  });\n}\n\n// Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name);\n  return new Expr({\n    singleton: wrap(ref)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name);\n  return new Expr({\n    events: wrap(ref_set)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\nfunction Match(index) {\n  arity.min(1, arguments, Match.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    match: wrap(index),\n    terms: wrap(varargs(args))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\nfunction Union() {\n  arity.min(1, arguments, Union.name);\n  return new Expr({\n    union: wrap(varargs(arguments))\n  });\n}\n\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name);\n  return new Expr(params({\n    merge: wrap(merge),\n    with: wrap(_with)\n  }, {\n    lambda: wrap(lambda)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name);\n  return new Expr({\n    intersection: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\nfunction Difference() {\n  arity.min(1, arguments, Difference.name);\n  return new Expr({\n    difference: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name);\n  return new Expr({\n    distinct: wrap(set)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name);\n  return new Expr({\n    join: wrap(source),\n    with: wrap(target)\n  });\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name);\n  return new Expr({\n    range: wrap(set),\n    from: wrap(from),\n    to: wrap(to)\n  });\n}\n\n// Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name);\n  return new Expr({\n    login: wrap(ref),\n    params: wrap(params)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name);\n  return new Expr({\n    logout: wrap(delete_tokens)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name);\n  return new Expr({\n    identify: wrap(ref),\n    password: wrap(password)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name);\n  return new Expr({\n    identity: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name);\n  return new Expr({\n    current_identity: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name);\n  return new Expr({\n    has_identity: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name);\n  return new Expr({\n    has_current_identity: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name);\n  return new Expr({\n    current_token: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name);\n  return new Expr({\n    has_current_token: null\n  });\n}\n\n// String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name);\n  separator = util.defaults(separator, null);\n  return new Expr(params({\n    concat: wrap(strings)\n  }, {\n    separator: wrap(separator)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name);\n  return new Expr(params({\n    casefold: wrap(string)\n  }, {\n    normalizer: wrap(normalizer)\n  }));\n}\n\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name);\n  return new Expr({\n    containsstr: wrap(value),\n    search: wrap(search)\n  });\n}\n\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name);\n  return new Expr({\n    containsstrregex: wrap(value),\n    pattern: wrap(pattern)\n  });\n}\n\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name);\n  return new Expr({\n    startswith: wrap(value),\n    search: wrap(search)\n  });\n}\n\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name);\n  return new Expr({\n    endswith: wrap(value),\n    search: wrap(search)\n  });\n}\n\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name);\n  return new Expr({\n    regexescape: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name);\n  start = util.defaults(start, null);\n  return new Expr(params({\n    findstr: wrap(value),\n    find: wrap(find)\n  }, {\n    start: wrap(start)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name);\n  start = util.defaults(start, null);\n  return new Expr(params({\n    findstrregex: wrap(value),\n    pattern: wrap(pattern)\n  }, {\n    start: wrap(start),\n    num_results: wrap(numResults)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name);\n  return new Expr({\n    length: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name);\n  return new Expr({\n    lowercase: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name);\n  return new Expr({\n    ltrim: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name);\n  min = util.defaults(min, null);\n  max = util.defaults(max, null);\n  return new Expr(params({\n    ngram: wrap(terms)\n  }, {\n    min: wrap(min),\n    max: wrap(max)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name);\n  number = util.defaults(number, null);\n  return new Expr(params({\n    repeat: wrap(value)\n  }, {\n    number: wrap(number)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name);\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name);\n  first = util.defaults(first, null);\n  return new Expr(params({\n    replacestrregex: wrap(value),\n    pattern: wrap(pattern),\n    replace: wrap(replace)\n  }, {\n    first: wrap(first)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name);\n  return new Expr({\n    rtrim: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name);\n  return new Expr({\n    space: wrap(num)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name);\n  start = util.defaults(start, null);\n  length = util.defaults(length, null);\n  return new Expr(params({\n    substring: wrap(value)\n  }, {\n    start: wrap(start),\n    length: wrap(length)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name);\n  return new Expr({\n    titlecase: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name);\n  return new Expr({\n    trim: wrap(value)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name);\n  return new Expr({\n    uppercase: wrap(value)\n  });\n}\n\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\nfunction Format(string) {\n  arity.min(1, arguments, Format.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    format: wrap(string),\n    values: wrap(varargs(args))\n  });\n}\n\n// Time and date functions\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name);\n  return new Expr({\n    time: wrap(string)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name);\n  return new Expr({\n    epoch: wrap(number),\n    unit: wrap(unit)\n  });\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name);\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit)\n  });\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name);\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit)\n  });\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name);\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name);\n  return new Expr({\n    date: wrap(string)\n  });\n}\n\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\nfunction Now() {\n  arity.exact(0, arguments, Now.name);\n  return new Expr({\n    now: wrap(null)\n  });\n}\n\n// Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name);\n  return new Expr({\n    next_id: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name);\n  return new Expr({\n    new_id: null\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        database: wrap(name)\n      });\n    case 2:\n      return new Expr({\n        database: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        index: wrap(name)\n      });\n    case 2:\n      return new Expr({\n        index: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        class: wrap(name)\n      });\n    case 2:\n      return new Expr({\n        class: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        collection: wrap(name)\n      });\n    case 2:\n      return new Expr({\n        collection: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name);\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        function: wrap(name)\n      });\n    case 2:\n      return new Expr({\n        function: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name);\n  scope = util.defaults(scope, null);\n  return new Expr(params({\n    role: wrap(name)\n  }, {\n    scope: wrap(scope)\n  }));\n}\n\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    access_providers: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    classes: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    collections: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    databases: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    indexes: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    functions: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    roles: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    keys: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    tokens: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    credentials: wrap(scope)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\nfunction Equals() {\n  arity.min(1, arguments, Equals.name);\n  return new Expr({\n    equals: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name);\n  return new Expr({\n    contains: wrap(path),\n    in: wrap(_in)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name);\n  return new Expr({\n    contains_value: wrap(value),\n    in: wrap(_in)\n  });\n}\n\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name);\n  return new Expr({\n    contains_field: wrap(field),\n    in: wrap(obj)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name);\n  return new Expr({\n    contains_path: wrap(path),\n    in: wrap(_in)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name);\n  var exprObj = {\n    select: wrap(path),\n    from: wrap(from)\n  };\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default);\n  }\n  return new Expr(exprObj);\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name);\n  return new Expr({\n    select_all: wrap(path),\n    from: wrap(from)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name);\n  return new Expr({\n    abs: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\nfunction Add() {\n  arity.min(1, arguments, Add.name);\n  return new Expr({\n    add: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name);\n  return new Expr({\n    bitand: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name);\n  return new Expr({\n    bitnot: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name);\n  return new Expr({\n    bitor: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name);\n  return new Expr({\n    bitxor: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name);\n  return new Expr({\n    ceil: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\nfunction Divide() {\n  arity.min(1, arguments, Divide.name);\n  return new Expr({\n    divide: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name);\n  return new Expr({\n    floor: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Max() {\n  arity.min(1, arguments, Max.name);\n  return new Expr({\n    max: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Min() {\n  arity.min(1, arguments, Min.name);\n  return new Expr({\n    min: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name);\n  return new Expr({\n    modulo: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name);\n  return new Expr({\n    multiply: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name);\n  precision = util.defaults(precision, null);\n  return new Expr(params({\n    round: wrap(value)\n  }, {\n    precision: wrap(precision)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name);\n  return new Expr({\n    subtract: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name);\n  return new Expr({\n    sign: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name);\n  return new Expr({\n    sqrt: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name);\n  precision = util.defaults(precision, null);\n  return new Expr(params({\n    trunc: wrap(value)\n  }, {\n    precision: wrap(precision)\n  }));\n}\n\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name);\n  return new Expr({\n    count: wrap(collection)\n  });\n}\n\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name);\n  return new Expr({\n    sum: wrap(collection)\n  });\n}\n\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name);\n  return new Expr({\n    mean: wrap(collection)\n  });\n}\n\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name);\n  return new Expr({\n    any: wrap(collection)\n  });\n}\n\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\nfunction All(collection) {\n  arity.exact(1, arguments, All.name);\n  return new Expr({\n    all: wrap(collection)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name);\n  return new Expr({\n    acos: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name);\n  return new Expr({\n    asin: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name);\n  return new Expr({\n    atan: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name);\n  return new Expr({\n    cos: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name);\n  return new Expr({\n    cosh: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name);\n  return new Expr({\n    degrees: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name);\n  return new Expr({\n    exp: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name);\n  side = util.defaults(side, null);\n  return new Expr(params({\n    hypot: wrap(value)\n  }, {\n    b: wrap(side)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name);\n  return new Expr({\n    ln: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name);\n  return new Expr({\n    log: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name);\n  exponent = util.defaults(exponent, null);\n  return new Expr(params({\n    pow: wrap(value)\n  }, {\n    exp: wrap(exponent)\n  }));\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name);\n  return new Expr({\n    radians: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name);\n  return new Expr({\n    sin: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name);\n  return new Expr({\n    sinh: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name);\n  return new Expr({\n    tan: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name);\n  return new Expr({\n    tanh: wrap(expr)\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LT() {\n  arity.min(1, arguments, LT.name);\n  return new Expr({\n    lt: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LTE() {\n  arity.min(1, arguments, LTE.name);\n  return new Expr({\n    lte: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GT() {\n  arity.min(1, arguments, GT.name);\n  return new Expr({\n    gt: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GTE() {\n  arity.min(1, arguments, GTE.name);\n  return new Expr({\n    gte: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\nfunction And() {\n  arity.min(1, arguments, And.name);\n  return new Expr({\n    and: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\nfunction Or() {\n  arity.min(1, arguments, Or.name);\n  return new Expr({\n    or: wrap(varargs(arguments))\n  });\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name);\n  return new Expr({\n    not: wrap(boolean)\n  });\n}\n\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name);\n  return new Expr({\n    to_string: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name);\n  return new Expr({\n    to_number: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name);\n  return new Expr({\n    to_object: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name);\n  return new Expr({\n    to_array: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name);\n  return new Expr({\n    to_double: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name);\n  return new Expr({\n    to_integer: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name);\n  return new Expr({\n    to_time: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name);\n  return new Expr({\n    to_seconds: wrap(expr)\n  });\n}\n\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name);\n  return new Expr({\n    to_millis: wrap(expr)\n  });\n}\n\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name);\n  return new Expr({\n    to_micros: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name);\n  return new Expr({\n    day_of_week: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name);\n  return new Expr({\n    day_of_year: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name);\n  return new Expr({\n    day_of_month: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name);\n  return new Expr({\n    hour: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name);\n  return new Expr({\n    minute: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name);\n  return new Expr({\n    second: wrap(expr)\n  });\n}\n\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name);\n  return new Expr({\n    month: wrap(expr)\n  });\n}\n\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name);\n  return new Expr({\n    year: wrap(expr)\n  });\n}\n\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name);\n  return new Expr({\n    to_date: wrap(expr)\n  });\n}\n\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name);\n  return new Expr({\n    move_database: wrap(from),\n    to: wrap(to)\n  });\n}\n\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name);\n  return new Expr({\n    documents: wrap(collection)\n  });\n}\n\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name);\n  return new Expr({\n    reverse: wrap(expr)\n  });\n}\n\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name);\n  return new Expr({\n    access_provider: wrap(name)\n  });\n}\n\n// Helpers\n\n/**\n * @ignore\n */\nfunction arity(min, max, args, callerFunc) {\n  if (min !== null && args.length < min || max !== null && args.length > max) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc);\n  }\n  if (min !== null) {\n    for (let i = 0; i < min; i++) {\n      if (args[i] === undefined) {\n        throw new errors.InvalidValue(`Expected value, but found 'undefined'. Argument ${i} for ${callerFunc} is required.`);\n      }\n    }\n  }\n}\narity.exact = function (n, args, callerFunc) {\n  arity(n, n, args, callerFunc);\n};\narity.max = function (n, args, callerFunc) {\n  arity(null, n, args, callerFunc);\n};\narity.min = function (n, args, callerFunc) {\n  arity(n, null, args, callerFunc);\n};\narity.between = function (min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc);\n};\n\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key];\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val;\n    }\n  }\n  return mainParams;\n}\n\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values) ? values : Array.prototype.slice.call(values);\n  return values.length === 1 ? values[0] : valuesAsArr;\n}\n\n/**\n * @ignore\n */\nfunction argsToArray(args) {\n  var rv = [];\n  rv.push.apply(rv, args);\n  return rv;\n}\n\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\nfunction wrap(obj) {\n  // the arity functions throw when provided undefined arguments\n  // but wrap can accept undefined values. It still should be given\n  // exactly one argument, even if it is undefined.\n  if (arguments.length !== 1) {\n    throw new errors.InvalidArity(1, 1, arguments.length, wrap.name);\n  }\n  if (obj === undefined || obj === null) {\n    return obj;\n  } else if (obj instanceof Expr || util.checkInstanceHasProperty(obj, '_isFaunaExpr')) {\n    return obj;\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function (str, symbol) {\n      return symbol;\n    });\n  } else if (typeof obj === 'function') {\n    return Lambda(obj);\n  } else if (Array.isArray(obj)) {\n    return new Expr(obj.map(function (elem) {\n      return wrap(elem);\n    }));\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj);\n  } else if (typeof obj === 'object') {\n    return new Expr({\n      object: wrapValues(obj)\n    });\n  } else {\n    return obj;\n  }\n}\n\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {};\n    Object.keys(obj).forEach(function (key) {\n      rv[key] = wrap(obj[key]);\n    });\n    return rv;\n  } else {\n    return null;\n  }\n}\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(CreateClass, 'CreateClass() is deprecated, use CreateCollection() instead'),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(Identity, 'Identity() is deprecated, use CurrentIdentity() instead'),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(HasIdentity, 'HasIdentity() is deprecated, use HasCurrentIdentity() instead'),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(Classes, 'Classes() is deprecated, use Collections() instead'),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(Contains, 'Contains() is deprecated, use ContainsPath() instead'),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  arity: arity,\n  wrap: wrap\n};","map":{"version":3,"names":["annotate","require","deprecate","Expr","errors","values","objectAssign","util","Ref","arity","between","arguments","name","length","wrap","ref","id","Bytes","bytes","exact","Abort","msg","abort","At","timestamp","expr","at","Let","vars","bindings","Array","isArray","map","item","wrapValues","Object","keys","filter","k","undefined","b","expr_vars","forEach","push","Var","apply","let","in","varName","var","If","condition","then","_else","if","else","Do","min","args","argsToArray","do","objectFunction","fields","object","Lambda","value","_lambdaFunc","checkInstanceHasProperty","InvalidValue","var_name","_lambdaExpr","func","lambda","Call","shift","call","varargs","Query","query","Map","collection","lambda_expr","Foreach","foreach","Filter","Take","number","take","Drop","drop","Prepend","elements","prepend","Append","append","IsEmpty","is_empty","IsNonEmpty","is_nonempty","IsNumber","is_number","IsDouble","is_double","IsInteger","is_integer","IsBoolean","is_boolean","IsNull","is_null","IsBytes","is_bytes","IsTimestamp","is_timestamp","IsDate","is_date","IsString","is_string","IsArray","is_array","IsObject","is_object","IsRef","is_ref","IsSet","is_set","IsDoc","is_doc","IsLambda","is_lambda","IsCollection","is_collection","IsDatabase","is_database","IsIndex","is_index","IsFunction","is_function","IsKey","is_key","IsToken","is_token","IsCredentials","is_credentials","IsRole","is_role","Get","ts","defaults","params","get","KeyFromSecret","secret","key_from_secret","Reduce","initial","reduce","Paginate","set","opts","paginate","Exists","exists","Create","collection_ref","create","Update","update","Replace","replace","Delete","delete","Insert","action","insert","Remove","remove","CreateClass","create_class","CreateCollection","create_collection","CreateDatabase","create_database","CreateIndex","create_index","CreateKey","create_key","CreateFunction","create_function","CreateRole","create_role","CreateAccessProvider","create_access_provider","Singleton","singleton","Events","ref_set","events","Match","index","match","terms","Union","union","Merge","merge","_with","with","Intersection","intersection","Difference","difference","Distinct","distinct","Join","source","target","join","Range","from","to","range","Login","login","Logout","delete_tokens","logout","Identify","password","identify","Identity","identity","CurrentIdentity","current_identity","HasIdentity","has_identity","HasCurrentIdentity","has_current_identity","CurrentToken","current_token","HasCurrentToken","has_current_token","Concat","strings","separator","concat","Casefold","string","normalizer","casefold","ContainsStr","search","containsstr","ContainsStrRegex","pattern","containsstrregex","StartsWith","startswith","EndsWith","endswith","RegexEscape","regexescape","FindStr","find","start","findstr","FindStrRegex","numResults","findstrregex","num_results","Length","LowerCase","lowercase","LTrim","ltrim","NGram","max","ngram","Repeat","repeat","ReplaceStr","replacestr","ReplaceStrRegex","first","replacestrregex","RTrim","rtrim","Space","num","space","SubString","substring","TitleCase","titlecase","Trim","trim","UpperCase","uppercase","Format","format","Time","time","Epoch","unit","epoch","TimeAdd","base","offset","time_add","TimeSubtract","time_subtract","TimeDiff","finish","time_diff","other","Date","date","Now","now","NextId","next_id","NewId","new_id","Database","scope","database","Index","Class","class","Collection","FunctionFn","function","Role","role","AccessProviders","access_providers","Classes","classes","Collections","collections","Databases","databases","Indexes","indexes","Functions","functions","Roles","roles","Keys","Tokens","tokens","Credentials","credentials","Equals","equals","Contains","path","_in","contains","ContainsValue","contains_value","ContainsField","field","obj","contains_field","ContainsPath","contains_path","Select","_default","exprObj","select","default","SelectAll","select_all","Abs","abs","Add","add","BitAnd","bitand","BitNot","bitnot","BitOr","bitor","BitXor","bitxor","Ceil","ceil","Divide","divide","Floor","floor","Max","Min","Modulo","modulo","Multiply","multiply","Round","precision","round","Subtract","subtract","Sign","sign","Sqrt","sqrt","Trunc","trunc","Count","count","Sum","sum","Mean","mean","Any","any","All","all","Acos","acos","Asin","asin","Atan","atan","Cos","cos","Cosh","cosh","Degrees","degrees","Exp","exp","Hypot","side","hypot","Ln","ln","Log","log","Pow","exponent","pow","Radians","radians","Sin","sin","Sinh","sinh","Tan","tan","Tanh","tanh","LT","lt","LTE","lte","GT","gt","GTE","gte","And","and","Or","or","Not","boolean","not","ToString","to_string","ToNumber","to_number","ToObject","to_object","ToArray","to_array","ToDouble","to_double","ToInteger","to_integer","ToTime","to_time","ToSeconds","to_seconds","ToMillis","to_millis","ToMicros","to_micros","DayOfWeek","day_of_week","DayOfYear","day_of_year","DayOfMonth","day_of_month","Hour","hour","Minute","minute","Second","second","Month","month","Year","year","ToDate","to_date","MoveDatabase","move_database","Documents","documents","Reverse","reverse","AccessProvider","access_provider","callerFunc","InvalidArity","i","n","mainParams","optionalParams","key","val","valuesAsArr","prototype","slice","rv","toString","str","symbol","elem","Uint8Array","ArrayBuffer","module","exports","Function"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/faunadb/src/query.js"],"sourcesContent":["'use strict'\n\nvar annotate = require('fn-annotate')\nvar deprecate = require('util-deprecate')\nvar Expr = require('./Expr')\nvar errors = require('./errors')\nvar values = require('./values')\nvar objectAssign = require('object-assign')\nvar util = require('./_util')\n\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ '@ref': wrap(arguments[0]) })\n    case 2:\n      return new Expr({ ref: wrap(arguments[0]), id: wrap(arguments[1]) })\n  }\n}\n\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name)\n  return new values.Bytes(bytes)\n}\n\n// Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name)\n  return new Expr({ abort: wrap(msg) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name)\n  return new Expr({ at: wrap(timestamp), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name)\n  var bindings = []\n\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function(item) {\n      return wrapValues(item)\n    })\n  } else {\n    bindings = Object.keys(vars)\n      .filter(function(k) {\n        return vars[k] !== undefined\n      })\n      .map(function(k) {\n        var b = {}\n        b[k] = wrap(vars[k])\n        return b\n      })\n  }\n\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = []\n\n      vars.forEach(function(item) {\n        Object.keys(item).forEach(function(name) {\n          expr_vars.push(Var(name))\n        })\n      })\n\n      expr = expr.apply(null, expr_vars)\n    } else {\n      expr = expr.apply(\n        null,\n        Object.keys(vars).map(function(name) {\n          return Var(name)\n        })\n      )\n    }\n  }\n\n  return new Expr({ let: bindings, in: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name)\n  return new Expr({ var: wrap(varName) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name)\n  return new Expr({ if: wrap(condition), then: wrap(then), else: wrap(_else) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\nfunction Do() {\n  arity.min(1, arguments, Do.name)\n  var args = argsToArray(arguments)\n  return new Expr({ do: wrap(args) })\n}\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\nvar objectFunction = function(fields) {\n  arity.exact(1, arguments, objectFunction.name)\n  return new Expr({ object: wrapValues(fields) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */ function Lambda() {\n  arity.between(1, 2, arguments, Lambda.name)\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0]\n      if (typeof value === 'function') {\n        return _lambdaFunc(value)\n      } else if (\n        value instanceof Expr ||\n        util.checkInstanceHasProperty(value, '_isFaunaExpr')\n      ) {\n        return value\n      } else {\n        throw new errors.InvalidValue(\n          'Lambda function takes either a Function or an Expr.'\n        )\n      }\n    case 2:\n      var var_name = arguments[0]\n      var expr = arguments[1]\n\n      return _lambdaExpr(var_name, expr)\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaFunc(func) {\n  var vars = annotate(func)\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue(\n        'Provided Function must take at least 1 argument.'\n      )\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])))\n    default:\n      return _lambdaExpr(\n        vars,\n        func.apply(\n          null,\n          vars.map(function(name) {\n            return Var(name)\n          })\n        )\n      )\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({ lambda: wrap(var_name), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ call: wrap(ref), arguments: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name)\n  return new Expr({ query: wrap(lambda) })\n}\n\n// Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name)\n  return new Expr({ map: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name)\n  return new Expr({ foreach: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name)\n  return new Expr({ filter: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name)\n  return new Expr({ take: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name)\n  return new Expr({ drop: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name)\n  return new Expr({ prepend: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name)\n  return new Expr({ append: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name)\n  return new Expr({ is_empty: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name)\n  return new Expr({ is_nonempty: wrap(collection) })\n}\n\n// Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name)\n  return new Expr({ is_number: wrap(expr) })\n}\n\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name)\n  return new Expr({ is_double: wrap(expr) })\n}\n\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name)\n  return new Expr({ is_integer: wrap(expr) })\n}\n\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name)\n  return new Expr({ is_boolean: wrap(expr) })\n}\n\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name)\n  return new Expr({ is_null: wrap(expr) })\n}\n\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name)\n  return new Expr({ is_bytes: wrap(expr) })\n}\n\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name)\n  return new Expr({ is_timestamp: wrap(expr) })\n}\n\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name)\n  return new Expr({ is_date: wrap(expr) })\n}\n\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name)\n  return new Expr({ is_string: wrap(expr) })\n}\n\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name)\n  return new Expr({ is_array: wrap(expr) })\n}\n\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name)\n  return new Expr({ is_object: wrap(expr) })\n}\n\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name)\n  return new Expr({ is_ref: wrap(expr) })\n}\n\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name)\n  return new Expr({ is_set: wrap(expr) })\n}\n\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name)\n  return new Expr({ is_doc: wrap(expr) })\n}\n\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name)\n  return new Expr({ is_lambda: wrap(expr) })\n}\n\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name)\n  return new Expr({ is_collection: wrap(expr) })\n}\n\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name)\n  return new Expr({ is_database: wrap(expr) })\n}\n\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name)\n  return new Expr({ is_index: wrap(expr) })\n}\n\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name)\n  return new Expr({ is_function: wrap(expr) })\n}\n\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name)\n  return new Expr({ is_key: wrap(expr) })\n}\n\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name)\n  return new Expr({ is_token: wrap(expr) })\n}\n\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name)\n  return new Expr({ is_credentials: wrap(expr) })\n}\n\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name)\n  return new Expr({ is_role: wrap(expr) })\n}\n\n// Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ get: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name)\n  return new Expr({ key_from_secret: wrap(secret) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name)\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name)\n  opts = util.defaults(opts, {})\n\n  return new Expr(objectAssign({ paginate: wrap(set) }, wrapValues(opts)))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ exists: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n// Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name)\n  return new Expr({ create: wrap(collection_ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name)\n  return new Expr({ update: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name)\n  return new Expr({ replace: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name)\n  return new Expr({ delete: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name)\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name)\n  return new Expr({ remove: wrap(ref), ts: wrap(ts), action: wrap(action) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name)\n  return new Expr({ create_class: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name)\n  return new Expr({ create_collection: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name)\n  return new Expr({ create_database: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name)\n  return new Expr({ create_index: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name)\n  return new Expr({ create_key: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name)\n  return new Expr({ create_function: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name)\n  return new Expr({ create_role: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name)\n  return new Expr({ create_access_provider: wrap(params) })\n}\n\n// Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name)\n  return new Expr({ singleton: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name)\n  return new Expr({ events: wrap(ref_set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\nfunction Match(index) {\n  arity.min(1, arguments, Match.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ match: wrap(index), terms: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\nfunction Union() {\n  arity.min(1, arguments, Union.name)\n  return new Expr({ union: wrap(varargs(arguments)) })\n}\n\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name)\n  return new Expr(\n    params({ merge: wrap(merge), with: wrap(_with) }, { lambda: wrap(lambda) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name)\n  return new Expr({ intersection: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\nfunction Difference() {\n  arity.min(1, arguments, Difference.name)\n  return new Expr({ difference: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name)\n  return new Expr({ distinct: wrap(set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name)\n  return new Expr({ join: wrap(source), with: wrap(target) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name)\n  return new Expr({ range: wrap(set), from: wrap(from), to: wrap(to) })\n}\n\n// Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name)\n  return new Expr({ login: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name)\n  return new Expr({ logout: wrap(delete_tokens) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name)\n  return new Expr({ identify: wrap(ref), password: wrap(password) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name)\n  return new Expr({ identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name)\n  return new Expr({ current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name)\n  return new Expr({ has_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name)\n  return new Expr({ has_current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name)\n  return new Expr({ current_token: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name)\n  return new Expr({ has_current_token: null })\n}\n\n// String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name)\n  separator = util.defaults(separator, null)\n  return new Expr(\n    params({ concat: wrap(strings) }, { separator: wrap(separator) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name)\n  return new Expr(\n    params({ casefold: wrap(string) }, { normalizer: wrap(normalizer) })\n  )\n}\n\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name)\n  return new Expr({ containsstr: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name)\n  return new Expr({ containsstrregex: wrap(value), pattern: wrap(pattern) })\n}\n\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name)\n  return new Expr({ startswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name)\n  return new Expr({ endswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name)\n  return new Expr({ regexescape: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params({ findstr: wrap(value), find: wrap(find) }, { start: wrap(start) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params(\n      { findstrregex: wrap(value), pattern: wrap(pattern) },\n      { start: wrap(start), num_results: wrap(numResults) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name)\n  return new Expr({ length: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name)\n  return new Expr({ lowercase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name)\n  return new Expr({ ltrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name)\n  min = util.defaults(min, null)\n  max = util.defaults(max, null)\n\n  return new Expr(\n    params({ ngram: wrap(terms) }, { min: wrap(min), max: wrap(max) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name)\n  number = util.defaults(number, null)\n  return new Expr(params({ repeat: wrap(value) }, { number: wrap(number) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name)\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name)\n  first = util.defaults(first, null)\n  return new Expr(\n    params(\n      {\n        replacestrregex: wrap(value),\n        pattern: wrap(pattern),\n        replace: wrap(replace),\n      },\n      { first: wrap(first) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name)\n  return new Expr({ rtrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name)\n  return new Expr({ space: wrap(num) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name)\n  start = util.defaults(start, null)\n  length = util.defaults(length, null)\n  return new Expr(\n    params(\n      { substring: wrap(value) },\n      { start: wrap(start), length: wrap(length) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name)\n  return new Expr({ titlecase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name)\n  return new Expr({ trim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name)\n  return new Expr({ uppercase: wrap(value) })\n}\n\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\nfunction Format(string) {\n  arity.min(1, arguments, Format.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ format: wrap(string), values: wrap(varargs(args)) })\n}\n\n// Time and date functions\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name)\n  return new Expr({ time: wrap(string) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name)\n  return new Expr({ epoch: wrap(number), unit: wrap(unit) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name)\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name)\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name)\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name)\n  return new Expr({ date: wrap(string) })\n}\n\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\nfunction Now() {\n  arity.exact(0, arguments, Now.name)\n  return new Expr({ now: wrap(null) })\n}\n\n// Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name)\n  return new Expr({ next_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name)\n  return new Expr({ new_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ database: wrap(name) })\n    case 2:\n      return new Expr({ database: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ index: wrap(name) })\n    case 2:\n      return new Expr({ index: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ class: wrap(name) })\n    case 2:\n      return new Expr({ class: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ collection: wrap(name) })\n    case 2:\n      return new Expr({ collection: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ function: wrap(name) })\n    case 2:\n      return new Expr({ function: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name)\n  scope = util.defaults(scope, null)\n  return new Expr(params({ role: wrap(name) }, { scope: wrap(scope) }))\n}\n\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ access_providers: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ classes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ collections: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ databases: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ indexes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ functions: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ roles: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ keys: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ tokens: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ credentials: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\nfunction Equals() {\n  arity.min(1, arguments, Equals.name)\n  return new Expr({ equals: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name)\n  return new Expr({ contains: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name)\n  return new Expr({ contains_value: wrap(value), in: wrap(_in) })\n}\n\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name)\n  return new Expr({ contains_field: wrap(field), in: wrap(obj) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name)\n  return new Expr({ contains_path: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name)\n  var exprObj = { select: wrap(path), from: wrap(from) }\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default)\n  }\n  return new Expr(exprObj)\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name)\n  return new Expr({ select_all: wrap(path), from: wrap(from) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name)\n  return new Expr({ abs: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\nfunction Add() {\n  arity.min(1, arguments, Add.name)\n  return new Expr({ add: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name)\n  return new Expr({ bitand: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name)\n  return new Expr({ bitnot: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name)\n  return new Expr({ bitor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name)\n  return new Expr({ bitxor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name)\n  return new Expr({ ceil: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\nfunction Divide() {\n  arity.min(1, arguments, Divide.name)\n  return new Expr({ divide: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name)\n  return new Expr({ floor: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Max() {\n  arity.min(1, arguments, Max.name)\n  return new Expr({ max: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Min() {\n  arity.min(1, arguments, Min.name)\n  return new Expr({ min: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name)\n  return new Expr({ modulo: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name)\n  return new Expr({ multiply: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ round: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name)\n  return new Expr({ subtract: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name)\n  return new Expr({ sign: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name)\n  return new Expr({ sqrt: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ trunc: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name)\n  return new Expr({ count: wrap(collection) })\n}\n\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name)\n  return new Expr({ sum: wrap(collection) })\n}\n\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name)\n  return new Expr({ mean: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name)\n  return new Expr({ any: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\nfunction All(collection) {\n  arity.exact(1, arguments, All.name)\n  return new Expr({ all: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name)\n  return new Expr({ acos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name)\n  return new Expr({ asin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name)\n  return new Expr({ atan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name)\n  return new Expr({ cos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name)\n  return new Expr({ cosh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name)\n  return new Expr({ degrees: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name)\n  return new Expr({ exp: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name)\n  side = util.defaults(side, null)\n  return new Expr(params({ hypot: wrap(value) }, { b: wrap(side) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name)\n  return new Expr({ ln: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name)\n  return new Expr({ log: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name)\n  exponent = util.defaults(exponent, null)\n  return new Expr(params({ pow: wrap(value) }, { exp: wrap(exponent) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name)\n  return new Expr({ radians: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name)\n  return new Expr({ sin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name)\n  return new Expr({ sinh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name)\n  return new Expr({ tan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name)\n  return new Expr({ tanh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LT() {\n  arity.min(1, arguments, LT.name)\n  return new Expr({ lt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LTE() {\n  arity.min(1, arguments, LTE.name)\n  return new Expr({ lte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GT() {\n  arity.min(1, arguments, GT.name)\n  return new Expr({ gt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GTE() {\n  arity.min(1, arguments, GTE.name)\n  return new Expr({ gte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\nfunction And() {\n  arity.min(1, arguments, And.name)\n  return new Expr({ and: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\nfunction Or() {\n  arity.min(1, arguments, Or.name)\n  return new Expr({ or: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name)\n  return new Expr({ not: wrap(boolean) })\n}\n\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name)\n  return new Expr({ to_string: wrap(expr) })\n}\n\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name)\n  return new Expr({ to_number: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name)\n  return new Expr({ to_object: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name)\n  return new Expr({ to_array: wrap(expr) })\n}\n\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name)\n  return new Expr({ to_double: wrap(expr) })\n}\n\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name)\n  return new Expr({ to_integer: wrap(expr) })\n}\n\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name)\n  return new Expr({ to_time: wrap(expr) })\n}\n\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name)\n  return new Expr({ to_seconds: wrap(expr) })\n}\n\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name)\n  return new Expr({ to_millis: wrap(expr) })\n}\n\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name)\n  return new Expr({ to_micros: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name)\n  return new Expr({ day_of_week: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name)\n  return new Expr({ day_of_year: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name)\n  return new Expr({ day_of_month: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name)\n  return new Expr({ hour: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name)\n  return new Expr({ minute: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name)\n  return new Expr({ second: wrap(expr) })\n}\n\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name)\n  return new Expr({ month: wrap(expr) })\n}\n\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name)\n  return new Expr({ year: wrap(expr) })\n}\n\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name)\n  return new Expr({ to_date: wrap(expr) })\n}\n\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name)\n  return new Expr({ move_database: wrap(from), to: wrap(to) })\n}\n\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name)\n  return new Expr({ documents: wrap(collection) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name)\n  return new Expr({ reverse: wrap(expr) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name)\n  return new Expr({ access_provider: wrap(name) })\n}\n\n// Helpers\n\n/**\n * @ignore\n */\nfunction arity(min, max, args, callerFunc) {\n  if (\n    (min !== null && args.length < min) ||\n    (max !== null && args.length > max)\n  ) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc)\n  }\n\n  if (min !== null) {\n    for (let i = 0; i < min; i++) {\n      if (args[i] === undefined) {\n        throw new errors.InvalidValue(\n          `Expected value, but found 'undefined'. Argument ${i} for ${callerFunc} is required.`\n        )\n      }\n    }\n  }\n}\n\narity.exact = function(n, args, callerFunc) {\n  arity(n, n, args, callerFunc)\n}\narity.max = function(n, args, callerFunc) {\n  arity(null, n, args, callerFunc)\n}\narity.min = function(n, args, callerFunc) {\n  arity(n, null, args, callerFunc)\n}\narity.between = function(min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc)\n}\n\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key]\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val\n    }\n  }\n  return mainParams\n}\n\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values)\n    ? values\n    : Array.prototype.slice.call(values)\n  return values.length === 1 ? values[0] : valuesAsArr\n}\n\n/**\n * @ignore\n */\nfunction argsToArray(args) {\n  var rv = []\n  rv.push.apply(rv, args)\n  return rv\n}\n\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\nfunction wrap(obj) {\n  // the arity functions throw when provided undefined arguments\n  // but wrap can accept undefined values. It still should be given\n  // exactly one argument, even if it is undefined.\n  if (arguments.length !== 1) {\n    throw new errors.InvalidArity(1, 1, arguments.length, wrap.name)\n  }\n  if (obj === undefined || obj === null) {\n    return obj\n  } else if (\n    obj instanceof Expr ||\n    util.checkInstanceHasProperty(obj, '_isFaunaExpr')\n  ) {\n    return obj\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function(str, symbol) {\n      return symbol\n    })\n  } else if (typeof obj === 'function') {\n    return Lambda(obj)\n  } else if (Array.isArray(obj)) {\n    return new Expr(\n      obj.map(function(elem) {\n        return wrap(elem)\n      })\n    )\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj)\n  } else if (typeof obj === 'object') {\n    return new Expr({ object: wrapValues(obj) })\n  } else {\n    return obj\n  }\n}\n\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {}\n\n    Object.keys(obj).forEach(function(key) {\n      rv[key] = wrap(obj[key])\n    })\n\n    return rv\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(\n    CreateClass,\n    'CreateClass() is deprecated, use CreateCollection() instead'\n  ),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(\n    Identity,\n    'Identity() is deprecated, use CurrentIdentity() instead'\n  ),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(\n    HasIdentity,\n    'HasIdentity() is deprecated, use HasCurrentIdentity() instead'\n  ),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(\n    Classes,\n    'Classes() is deprecated, use Collections() instead'\n  ),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(\n    Contains,\n    'Contains() is deprecated, use ContainsPath() instead'\n  ),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  arity: arity,\n  wrap: wrap,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}