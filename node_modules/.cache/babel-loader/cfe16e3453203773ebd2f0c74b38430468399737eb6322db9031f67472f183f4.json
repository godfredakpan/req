{"ast":null,"code":"/** insert new words/phrases into the lexicon */\nconst addWords = function (words) {\n  const world = this.world();\n  const {\n    methods,\n    model\n  } = world;\n  if (!words) {\n    return;\n  }\n  // normalize tag vals\n  Object.keys(words).forEach(k => {\n    if (typeof words[k] === 'string' && words[k].startsWith('#')) {\n      words[k] = words[k].replace(/^#/, '');\n    }\n  });\n  // add some words to our lexicon\n  if (methods.two.expandLexicon) {\n    // do fancy ./two version\n    let {\n      lex,\n      _multi\n    } = methods.two.expandLexicon(words, world);\n    Object.assign(model.one.lexicon, lex);\n    Object.assign(model.one._multiCache, _multi);\n  } else if (methods.one.expandLexicon) {\n    // do basic ./one version\n    let {\n      lex,\n      _multi\n    } = methods.one.expandLexicon(words, world);\n    Object.assign(model.one.lexicon, lex);\n    Object.assign(model.one._multiCache, _multi);\n  } else {\n    //no fancy-business\n    Object.assign(model.one.lexicon, words);\n  }\n};\nexport default {\n  addWords\n};","map":{"version":3,"names":["addWords","words","world","methods","model","Object","keys","forEach","k","startsWith","replace","two","expandLexicon","lex","_multi","assign","one","lexicon","_multiCache"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/1-one/lexicon/lib.js"],"sourcesContent":["/** insert new words/phrases into the lexicon */\nconst addWords = function (words) {\n  const world = this.world()\n  const { methods, model } = world\n  if (!words) {\n    return\n  }\n  // normalize tag vals\n  Object.keys(words).forEach(k => {\n    if (typeof words[k] === 'string' && words[k].startsWith('#')) {\n      words[k] = words[k].replace(/^#/, '')\n    }\n  })\n  // add some words to our lexicon\n  if (methods.two.expandLexicon) {\n    // do fancy ./two version\n    let { lex, _multi } = methods.two.expandLexicon(words, world)\n    Object.assign(model.one.lexicon, lex)\n    Object.assign(model.one._multiCache, _multi)\n  } else if (methods.one.expandLexicon) {\n    // do basic ./one version\n    let { lex, _multi } = methods.one.expandLexicon(words, world)\n    Object.assign(model.one.lexicon, lex)\n    Object.assign(model.one._multiCache, _multi)\n  } else {\n    //no fancy-business\n    Object.assign(model.one.lexicon, words)\n  }\n}\n\nexport default { addWords }"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,UAAUC,KAAK,EAAE;EAChC,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;EAC1B,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGF,KAAK;EAChC,IAAI,CAACD,KAAK,EAAE;IACV;EACF;EACA;EACAI,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,OAAO,CAACC,CAAC,IAAI;IAC9B,IAAI,OAAOP,KAAK,CAACO,CAAC,CAAC,KAAK,QAAQ,IAAIP,KAAK,CAACO,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MAC5DR,KAAK,CAACO,CAAC,CAAC,GAAGP,KAAK,CAACO,CAAC,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACvC;EACF,CAAC,CAAC;EACF;EACA,IAAIP,OAAO,CAACQ,GAAG,CAACC,aAAa,EAAE;IAC7B;IACA,IAAI;MAAEC,GAAG;MAAEC;IAAO,CAAC,GAAGX,OAAO,CAACQ,GAAG,CAACC,aAAa,CAACX,KAAK,EAAEC,KAAK,CAAC;IAC7DG,MAAM,CAACU,MAAM,CAACX,KAAK,CAACY,GAAG,CAACC,OAAO,EAAEJ,GAAG,CAAC;IACrCR,MAAM,CAACU,MAAM,CAACX,KAAK,CAACY,GAAG,CAACE,WAAW,EAAEJ,MAAM,CAAC;EAC9C,CAAC,MAAM,IAAIX,OAAO,CAACa,GAAG,CAACJ,aAAa,EAAE;IACpC;IACA,IAAI;MAAEC,GAAG;MAAEC;IAAO,CAAC,GAAGX,OAAO,CAACa,GAAG,CAACJ,aAAa,CAACX,KAAK,EAAEC,KAAK,CAAC;IAC7DG,MAAM,CAACU,MAAM,CAACX,KAAK,CAACY,GAAG,CAACC,OAAO,EAAEJ,GAAG,CAAC;IACrCR,MAAM,CAACU,MAAM,CAACX,KAAK,CAACY,GAAG,CAACE,WAAW,EAAEJ,MAAM,CAAC;EAC9C,CAAC,MAAM;IACL;IACAT,MAAM,CAACU,MAAM,CAACX,KAAK,CAACY,GAAG,CAACC,OAAO,EAAEhB,KAAK,CAAC;EACzC;AACF,CAAC;AAED,eAAe;EAAED;AAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}