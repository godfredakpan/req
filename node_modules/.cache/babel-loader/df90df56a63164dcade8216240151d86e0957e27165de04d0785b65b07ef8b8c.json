{"ast":null,"code":"// scan-ahead to match multiple-word terms - 'jack rabbit'\nconst checkMulti = function (terms, i, lexicon, setTag, world) {\n  let max = i + 4 > terms.length ? terms.length - i : 4;\n  let str = terms[i].machine || terms[i].normal;\n  for (let skip = 1; skip < max; skip += 1) {\n    let t = terms[i + skip];\n    let word = t.machine || t.normal;\n    str += ' ' + word;\n    if (lexicon.hasOwnProperty(str) === true) {\n      let tag = lexicon[str];\n      let ts = terms.slice(i, i + skip + 1);\n      setTag(ts, tag, world, false, '1-multi-lexicon');\n\n      // special case for phrasal-verbs - 2nd word is a #Particle\n      if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {\n        setTag([ts[1]], 'Particle', world, false, '1-phrasal-particle');\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst multiWord = function (terms, i, world) {\n  const {\n    model,\n    methods\n  } = world;\n  // const { fastTag } = methods.one\n  const setTag = methods.one.setTag;\n  const multi = model.one._multiCache || {};\n  const lexicon = model.one.lexicon || {};\n  // basic lexicon lookup\n  let t = terms[i];\n  let word = t.machine || t.normal;\n  // multi-word lookup\n  if (terms[i + 1] !== undefined && multi[word] === true) {\n    return checkMulti(terms, i, lexicon, setTag, world);\n  }\n  return null;\n};\nexport default multiWord;","map":{"version":3,"names":["checkMulti","terms","i","lexicon","setTag","world","max","length","str","machine","normal","skip","t","word","hasOwnProperty","tag","ts","slice","multiWord","model","methods","one","multi","_multiCache","undefined"],"sources":["/Users/godfredakpan/Documents/signature_generator/signature_generator/node_modules/compromise/src/1-one/lexicon/compute/multi-word.js"],"sourcesContent":["\n// scan-ahead to match multiple-word terms - 'jack rabbit'\nconst checkMulti = function (terms, i, lexicon, setTag, world) {\n  let max = i + 4 > terms.length ? terms.length - i : 4\n  let str = terms[i].machine || terms[i].normal\n  for (let skip = 1; skip < max; skip += 1) {\n    let t = terms[i + skip]\n    let word = t.machine || t.normal\n    str += ' ' + word\n    if (lexicon.hasOwnProperty(str) === true) {\n      let tag = lexicon[str]\n      let ts = terms.slice(i, i + skip + 1)\n      setTag(ts, tag, world, false, '1-multi-lexicon')\n\n      // special case for phrasal-verbs - 2nd word is a #Particle\n      if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {\n        setTag([ts[1]], 'Particle', world, false, '1-phrasal-particle')\n      }\n      return true\n    }\n  }\n  return false\n}\n\nconst multiWord = function (terms, i, world) {\n  const { model, methods } = world\n  // const { fastTag } = methods.one\n  const setTag = methods.one.setTag\n  const multi = model.one._multiCache || {}\n  const lexicon = model.one.lexicon || {}\n  // basic lexicon lookup\n  let t = terms[i]\n  let word = t.machine || t.normal\n  // multi-word lookup\n  if (terms[i + 1] !== undefined && multi[word] === true) {\n    return checkMulti(terms, i, lexicon, setTag, world)\n  }\n  return null\n}\nexport default multiWord\n"],"mappings":"AACA;AACA,MAAMA,UAAU,GAAG,UAAUC,KAAK,EAAEC,CAAC,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAC7D,IAAIC,GAAG,GAAGJ,CAAC,GAAG,CAAC,GAAGD,KAAK,CAACM,MAAM,GAAGN,KAAK,CAACM,MAAM,GAAGL,CAAC,GAAG,CAAC;EACrD,IAAIM,GAAG,GAAGP,KAAK,CAACC,CAAC,CAAC,CAACO,OAAO,IAAIR,KAAK,CAACC,CAAC,CAAC,CAACQ,MAAM;EAC7C,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,GAAG,EAAEK,IAAI,IAAI,CAAC,EAAE;IACxC,IAAIC,CAAC,GAAGX,KAAK,CAACC,CAAC,GAAGS,IAAI,CAAC;IACvB,IAAIE,IAAI,GAAGD,CAAC,CAACH,OAAO,IAAIG,CAAC,CAACF,MAAM;IAChCF,GAAG,IAAI,GAAG,GAAGK,IAAI;IACjB,IAAIV,OAAO,CAACW,cAAc,CAACN,GAAG,CAAC,KAAK,IAAI,EAAE;MACxC,IAAIO,GAAG,GAAGZ,OAAO,CAACK,GAAG,CAAC;MACtB,IAAIQ,EAAE,GAAGf,KAAK,CAACgB,KAAK,CAACf,CAAC,EAAEA,CAAC,GAAGS,IAAI,GAAG,CAAC,CAAC;MACrCP,MAAM,CAACY,EAAE,EAAED,GAAG,EAAEV,KAAK,EAAE,KAAK,EAAE,iBAAiB,CAAC;;MAEhD;MACA,IAAIU,GAAG,IAAIA,GAAG,CAACR,MAAM,KAAK,CAAC,KAAKQ,GAAG,CAAC,CAAC,CAAC,KAAK,aAAa,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,aAAa,CAAC,EAAE;QACrFX,MAAM,CAAC,CAACY,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAEX,KAAK,EAAE,KAAK,EAAE,oBAAoB,CAAC;MACjE;MACA,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMa,SAAS,GAAG,UAAUjB,KAAK,EAAEC,CAAC,EAAEG,KAAK,EAAE;EAC3C,MAAM;IAAEc,KAAK;IAAEC;EAAQ,CAAC,GAAGf,KAAK;EAChC;EACA,MAAMD,MAAM,GAAGgB,OAAO,CAACC,GAAG,CAACjB,MAAM;EACjC,MAAMkB,KAAK,GAAGH,KAAK,CAACE,GAAG,CAACE,WAAW,IAAI,CAAC,CAAC;EACzC,MAAMpB,OAAO,GAAGgB,KAAK,CAACE,GAAG,CAAClB,OAAO,IAAI,CAAC,CAAC;EACvC;EACA,IAAIS,CAAC,GAAGX,KAAK,CAACC,CAAC,CAAC;EAChB,IAAIW,IAAI,GAAGD,CAAC,CAACH,OAAO,IAAIG,CAAC,CAACF,MAAM;EAChC;EACA,IAAIT,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,KAAKsB,SAAS,IAAIF,KAAK,CAACT,IAAI,CAAC,KAAK,IAAI,EAAE;IACtD,OAAOb,UAAU,CAACC,KAAK,EAAEC,CAAC,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,CAAC;EACrD;EACA,OAAO,IAAI;AACb,CAAC;AACD,eAAea,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}