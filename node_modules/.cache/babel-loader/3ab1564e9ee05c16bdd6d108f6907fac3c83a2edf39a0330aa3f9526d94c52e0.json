{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appengine_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar appengine_v1;\n(function (appengine_v1) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1');\n   * ```\n   */\n  class Appengine {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.apps = new Resource$Apps(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n  }\n  appengine_v1.Appengine = Appengine;\n  class Resource$Apps {\n    constructor(context) {\n      this.context = context;\n      this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n      this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n      this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n      this.firewall = new Resource$Apps$Firewall(this.context);\n      this.locations = new Resource$Apps$Locations(this.context);\n      this.operations = new Resource$Apps$Operations(this.context);\n      this.services = new Resource$Apps$Services(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    repair(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}:repair').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps = Resource$Apps;\n  class Resource$Apps$Authorizedcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n  class Resource$Apps$Authorizeddomains {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n  class Resource$Apps$Domainmappings {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n  class Resource$Apps$Firewall {\n    constructor(context) {\n      this.context = context;\n      this.ingressRules = new Resource$Apps$Firewall$Ingressrules(this.context);\n    }\n  }\n  appengine_v1.Resource$Apps$Firewall = Resource$Apps$Firewall;\n  class Resource$Apps$Firewall$Ingressrules {\n    constructor(context) {\n      this.context = context;\n    }\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Firewall$Ingressrules = Resource$Apps$Firewall$Ingressrules;\n  class Resource$Apps$Locations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'locationsId'],\n        pathParams: ['appsId', 'locationsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Locations = Resource$Apps$Locations;\n  class Resource$Apps$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'operationsId'],\n        pathParams: ['appsId', 'operationsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Operations = Resource$Apps$Operations;\n  class Resource$Apps$Services {\n    constructor(context) {\n      this.context = context;\n      this.versions = new Resource$Apps$Services$Versions(this.context);\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Services = Resource$Apps$Services;\n  class Resource$Apps$Services$Versions {\n    constructor(context) {\n      this.context = context;\n      this.instances = new Resource$Apps$Services$Versions$Instances(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n  class Resource$Apps$Services$Versions$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n    debug(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Projects$Locations(this.context);\n    }\n  }\n  appengine_v1.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.applications = new Resource$Projects$Locations$Applications(this.context);\n    }\n  }\n  appengine_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n  class Resource$Projects$Locations$Applications {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/projects/{projectsId}/locations/{locationsId}/applications/{applicationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectsId', 'locationsId', 'applicationsId'],\n        pathParams: ['applicationsId', 'locationsId', 'projectsId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  appengine_v1.Resource$Projects$Locations$Applications = Resource$Projects$Locations$Applications;\n})(appengine_v1 = exports.appengine_v1 || (exports.appengine_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","appengine_v1","googleapis_common_1","require","Appengine","constructor","options","google","context","_options","apps","Resource$Apps","projects","Resource$Projects","authorizedCertificates","Resource$Apps$Authorizedcertificates","authorizedDomains","Resource$Apps$Authorizeddomains","domainMappings","Resource$Apps$Domainmappings","firewall","Resource$Apps$Firewall","locations","Resource$Apps$Locations","operations","Resource$Apps$Operations","services","Resource$Apps$Services","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","patch","repair","delete","list","ingressRules","Resource$Apps$Firewall$Ingressrules","batchUpdate","versions","Resource$Apps$Services$Versions","instances","Resource$Apps$Services$Versions$Instances","debug","Resource$Projects$Locations","applications","Resource$Projects$Locations$Applications"],"sources":["/Users/godfredakpan/Documents/projects/AgentReg/node_modules/googleapis/build/src/apis/appengine/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.appengine_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar appengine_v1;\n(function (appengine_v1) {\n    /**\n     * App Engine Admin API\n     *\n     * Provisions and manages developers&#39; App Engine applications.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const appengine = google.appengine('v1');\n     * ```\n     */\n    class Appengine {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.apps = new Resource$Apps(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    appengine_v1.Appengine = Appengine;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n            this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n            this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n            this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n            this.firewall = new Resource$Apps$Firewall(this.context);\n            this.locations = new Resource$Apps$Locations(this.context);\n            this.operations = new Resource$Apps$Operations(this.context);\n            this.services = new Resource$Apps$Services(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        repair(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}:repair').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps = Resource$Apps;\n    class Resource$Apps$Authorizedcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n    class Resource$Apps$Authorizeddomains {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n    class Resource$Apps$Domainmappings {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n    class Resource$Apps$Firewall {\n        constructor(context) {\n            this.context = context;\n            this.ingressRules = new Resource$Apps$Firewall$Ingressrules(this.context);\n        }\n    }\n    appengine_v1.Resource$Apps$Firewall = Resource$Apps$Firewall;\n    class Resource$Apps$Firewall$Ingressrules {\n        constructor(context) {\n            this.context = context;\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Firewall$Ingressrules = Resource$Apps$Firewall$Ingressrules;\n    class Resource$Apps$Locations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'locationsId'],\n                pathParams: ['appsId', 'locationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Locations = Resource$Apps$Locations;\n    class Resource$Apps$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'operationsId'],\n                pathParams: ['appsId', 'operationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Operations = Resource$Apps$Operations;\n    class Resource$Apps$Services {\n        constructor(context) {\n            this.context = context;\n            this.versions = new Resource$Apps$Services$Versions(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Services = Resource$Apps$Services;\n    class Resource$Apps$Services$Versions {\n        constructor(context) {\n            this.context = context;\n            this.instances = new Resource$Apps$Services$Versions$Instances(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n    class Resource$Apps$Services$Versions$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        debug(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Projects$Locations(this.context);\n        }\n    }\n    appengine_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.applications = new Resource$Projects$Locations$Applications(this.context);\n        }\n    }\n    appengine_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Applications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{projectsId}/locations/{locationsId}/applications/{applicationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectsId', 'locationsId', 'applicationsId'],\n                pathParams: ['applicationsId', 'locationsId', 'projectsId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    appengine_v1.Resource$Projects$Locations$Applications = Resource$Projects$Locations$Applications;\n})(appengine_v1 = exports.appengine_v1 || (exports.appengine_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}